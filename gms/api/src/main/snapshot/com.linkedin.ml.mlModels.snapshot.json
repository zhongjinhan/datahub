{
  "models" : [ {
    "type" : "record",
    "name" : "AuditStamp",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
    "fields" : [ {
      "name" : "time",
      "type" : {
        "type" : "typeref",
        "name" : "Time",
        "doc" : "Number of milliseconds since midnight, January 1, 1970 UTC. It must be a positive number",
        "ref" : "long"
      },
      "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
    }, {
      "name" : "actor",
      "type" : {
        "type" : "typeref",
        "name" : "Urn",
        "ref" : "string",
        "java" : {
          "class" : "com.linkedin.common.urn.Urn"
        }
      },
      "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."
    }, {
      "name" : "impersonator",
      "type" : "Urn",
      "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "ChangeAuditStamps",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations",
    "fields" : [ {
      "name" : "created",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the creation of this resource/association/sub-resource"
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created"
    }, {
      "name" : "deleted",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.",
      "optional" : true
    } ]
  }, {
    "type" : "typeref",
    "name" : "CorpuserUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Corporate user's AD/LDAP login",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.CorpuserUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Corporate user's AD/LDAP login",
        "entityType" : "corpuser",
        "fields" : [ {
          "doc" : "The name of the AD/LDAP user.",
          "maxLength" : 20,
          "name" : "username",
          "type" : "string"
        } ],
        "maxLength" : 36,
        "name" : "Corpuser",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:security"
      }
    }
  }, {
    "type" : "record",
    "name" : "Cost",
    "namespace" : "com.linkedin.common",
    "fields" : [ {
      "name" : "costType",
      "type" : {
        "type" : "enum",
        "name" : "CostType",
        "doc" : "Type of Cost Code",
        "symbols" : [ "ORG_COST_TYPE" ],
        "symbolDocs" : {
          "ORG_COST_TYPE" : "Org Cost Type to which the Cost of this entity should be attributed to"
        }
      }
    }, {
      "name" : "cost",
      "type" : {
        "type" : "typeref",
        "name" : "CostValue",
        "doc" : "A union of all supported Cost Value types",
        "ref" : [ {
          "alias" : "costId",
          "type" : "double"
        }, {
          "alias" : "costCode",
          "type" : "string"
        } ]
      }
    } ]
  }, "com.linkedin.common.CostType", "com.linkedin.common.CostValue", {
    "type" : "typeref",
    "name" : "DataPlatformUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized data platforms available",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DataPlatformUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized data platforms available",
        "entityType" : "dataPlatform",
        "fields" : [ {
          "doc" : "data platform name i.e. hdfs, oracle, espresso",
          "maxLength" : 25,
          "name" : "platformName",
          "type" : "string"
        } ],
        "maxLength" : 45,
        "name" : "DataPlatform",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:wherehows"
      }
    }
  }, {
    "type" : "typeref",
    "name" : "DatasetUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized dataset identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DatasetUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized dataset identifier.",
        "entityType" : "dataset",
        "fields" : [ {
          "doc" : "Standardized platform urn where dataset is defined.",
          "name" : "platform",
          "type" : "com.linkedin.common.urn.DataPlatformUrn"
        }, {
          "doc" : "Dataset native name e.g. <db>.<table>, /dir/subdir/<name>, or <name>",
          "maxLength" : 210,
          "name" : "datasetName",
          "type" : "string"
        }, {
          "doc" : "data layer where dataset belongs to or where it was generated.",
          "name" : "layer",
          "type" : "string"
        } ],
        "maxLength" : 284,
        "name" : "Dataset",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "record",
    "name" : "Deprecation",
    "namespace" : "com.linkedin.common",
    "doc" : "Deprecation status of an entity",
    "fields" : [ {
      "name" : "deprecated",
      "type" : "boolean",
      "doc" : "Whether the entity is deprecated."
    }, {
      "name" : "decommissionTime",
      "type" : "Time",
      "doc" : "The time user plan to decommission this entity.",
      "optional" : true
    }, {
      "name" : "note",
      "type" : "string",
      "doc" : "Additional information about the entity deprecation plan, such as the wiki, doc, RB."
    }, {
      "name" : "actor",
      "type" : "CorpuserUrn",
      "doc" : "The corpuser URN which will be credited for modifying this deprecation content."
    } ]
  }, {
    "type" : "enum",
    "name" : "FabricType",
    "namespace" : "com.linkedin.common",
    "doc" : "Fabric group type",
    "symbols" : [ "DEV", "EI", "PROD", "CORP" ],
    "symbolDocs" : {
      "CORP" : "Designates corporation fabrics",
      "DEV" : "Designates development fabrics",
      "EI" : "Designates early-integration (staging) fabrics",
      "PROD" : "Designates production fabrics"
    }
  }, {
    "type" : "record",
    "name" : "InstitutionalMemory",
    "namespace" : "com.linkedin.common",
    "doc" : "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity.",
    "fields" : [ {
      "name" : "elements",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "InstitutionalMemoryMetadata",
          "doc" : "Metadata corresponding to a record of institutional memory.",
          "fields" : [ {
            "name" : "url",
            "type" : {
              "type" : "typeref",
              "name" : "Url",
              "ref" : "string",
              "java" : {
                "class" : "com.linkedin.common.url.Url",
                "coercerClass" : "com.linkedin.common.url.UrlCoercer"
              }
            },
            "doc" : "Link to an engineering design document or a wiki page."
          }, {
            "name" : "description",
            "type" : "string",
            "doc" : "Description of the link."
          }, {
            "name" : "createStamp",
            "type" : "AuditStamp",
            "doc" : "Audit stamp associated with creation of this record"
          } ]
        }
      },
      "doc" : "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."
    } ]
  }, "com.linkedin.common.InstitutionalMemoryMetadata", {
    "type" : "typeref",
    "name" : "MLFeatureUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized MLFeature identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.MLFeatureUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized MLFeature identifier.",
        "entityType" : "mlFeature",
        "fields" : [ {
          "doc" : "Namespace for the MLFeature",
          "name" : "mlFeatureNamespace",
          "type" : "string"
        }, {
          "doc" : "Name of the MLFeature",
          "maxLength" : 210,
          "name" : "mlFeatureName",
          "type" : "string"
        } ],
        "maxLength" : 284,
        "name" : "MLFeature",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "typeref",
    "name" : "MLModelUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized MLModel identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.MLModelUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized model identifier.",
        "entityType" : "mlModel",
        "fields" : [ {
          "doc" : "Standardized platform urn for the MLModel.",
          "name" : "platform",
          "type" : "com.linkedin.common.urn.DataPlatformUrn"
        }, {
          "doc" : "Name of the MLModel",
          "maxLength" : 210,
          "name" : "mlModelName",
          "type" : "string"
        }, {
          "doc" : "Fabric type where model belongs to or where it was generated.",
          "name" : "origin",
          "type" : "com.linkedin.common.FabricType"
        } ],
        "maxLength" : 284,
        "name" : "MlModel",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "record",
    "name" : "Owner",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information",
    "fields" : [ {
      "name" : "owner",
      "type" : "Urn",
      "doc" : "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\n(Caveat: only corpuser is currently supported in the frontend.)"
    }, {
      "name" : "type",
      "type" : {
        "type" : "enum",
        "name" : "OwnershipType",
        "doc" : "Owner category or owner role",
        "symbols" : [ "DEVELOPER", "DATAOWNER", "DELEGATE", "PRODUCER", "CONSUMER", "STAKEHOLDER" ],
        "symbolDocs" : {
          "CONSUMER" : "A person, group, or service that consumes the data",
          "DATAOWNER" : "A person or group that is owning the data",
          "DELEGATE" : "A person or a group that overseas the operation, e.g. a DBA or SRE.",
          "DEVELOPER" : "A person or group that is in charge of developing the code",
          "PRODUCER" : "A person, group, or service that produces/generates the data",
          "STAKEHOLDER" : "A person or a group that has direct business interest"
        }
      },
      "doc" : "The type of the ownership"
    }, {
      "name" : "source",
      "type" : {
        "type" : "record",
        "name" : "OwnershipSource",
        "doc" : "Source/provider of the ownership information",
        "fields" : [ {
          "name" : "type",
          "type" : {
            "type" : "enum",
            "name" : "OwnershipSourceType",
            "symbols" : [ "AUDIT", "DATABASE", "FILE_SYSTEM", "ISSUE_TRACKING_SYSTEM", "MANUAL", "SERVICE", "SOURCE_CONTROL", "OTHER" ],
            "symbolDocs" : {
              "AUDIT" : "Auditing system or audit logs",
              "DATABASE" : "Database, e.g. GRANTS table",
              "FILE_SYSTEM" : "File system, e.g. file/directory owner",
              "ISSUE_TRACKING_SYSTEM" : "Issue tracking system, e.g. Jira",
              "MANUAL" : "Manually provided by a user",
              "OTHER" : "Other sources",
              "SERVICE" : "Other ownership-like service, e.g. Nuage, ACL service etc",
              "SOURCE_CONTROL" : "SCM system, e.g. GIT, SVN"
            }
          },
          "doc" : "The type of the source"
        }, {
          "name" : "url",
          "type" : "string",
          "doc" : "A reference URL for the source",
          "optional" : true
        } ]
      },
      "doc" : "Source information for the ownership",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "Ownership",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information of an entity.",
    "fields" : [ {
      "name" : "owners",
      "type" : {
        "type" : "array",
        "items" : "Owner"
      },
      "doc" : "List of owners of the entity."
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "Audit stamp containing who last modified the record and when."
    } ]
  }, "com.linkedin.common.OwnershipSource", "com.linkedin.common.OwnershipSourceType", "com.linkedin.common.OwnershipType", {
    "type" : "record",
    "name" : "Status",
    "namespace" : "com.linkedin.common",
    "doc" : "The status metadata of an entity, e.g. dataset, metric, feature, etc.",
    "fields" : [ {
      "name" : "removed",
      "type" : "boolean",
      "doc" : "whether the entity is removed or not",
      "default" : false
    } ]
  }, "com.linkedin.common.Time", "com.linkedin.common.Url", "com.linkedin.common.Urn", {
    "type" : "record",
    "name" : "VersionTag",
    "namespace" : "com.linkedin.common",
    "doc" : "A resource-defined string representing the resource state for the purpose of concurrency control",
    "fields" : [ {
      "name" : "versionTag",
      "type" : "string",
      "optional" : true
    } ]
  }, {
    "type" : "typeref",
    "name" : "MLModelAspect",
    "namespace" : "com.linkedin.metadata.aspect",
    "doc" : "A union of all supported metadata aspects for a ML Model",
    "ref" : [ "com.linkedin.common.Ownership", {
      "type" : "record",
      "name" : "MLModelProperties",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "Properties associated with a ML Model",
      "fields" : [ {
        "name" : "description",
        "type" : "string",
        "doc" : "Documentation of the MLModel",
        "optional" : true
      }, {
        "name" : "date",
        "type" : "com.linkedin.common.Time",
        "doc" : "Date when the MLModel was developed",
        "optional" : true
      }, {
        "name" : "version",
        "type" : "com.linkedin.common.VersionTag",
        "doc" : "Version of the MLModel",
        "optional" : true
      }, {
        "name" : "type",
        "type" : "string",
        "doc" : "Type of Algorithm or MLModel such as whether it is a Naive Bayes classifier, Convolutional Neural Network, etc",
        "optional" : true
      }, {
        "name" : "hyperParameters",
        "type" : {
          "type" : "map",
          "values" : {
            "type" : "typeref",
            "name" : "HyperParameterValueType",
            "doc" : "A union of all supported metadata aspects for HyperParameter Value",
            "ref" : [ "string", "int", "float", "double", "boolean" ]
          }
        },
        "doc" : "Hyper Parameters of the MLModel",
        "optional" : true
      }, {
        "name" : "mlFeatures",
        "type" : {
          "type" : "array",
          "items" : "com.linkedin.common.MLFeatureUrn"
        },
        "doc" : "List of features used for MLModel training",
        "optional" : true
      }, {
        "name" : "tags",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Tags for the MLModel",
        "default" : [ ]
      } ]
    }, {
      "type" : "record",
      "name" : "IntendedUse",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "Intended Use for the ML Model",
      "fields" : [ {
        "name" : "primaryUses",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Primary Use cases for the MLModel.",
        "optional" : true
      }, {
        "name" : "primaryUsers",
        "type" : {
          "type" : "array",
          "items" : {
            "type" : "enum",
            "name" : "IntendedUserType",
            "symbols" : [ "ENTERPRISE", "HOBBY", "ENTERTAINMENT" ]
          }
        },
        "doc" : "Primary Intended Users - For example, was the MLModel developed for entertainment purposes, for hobbyists, or enterprise solutions?",
        "optional" : true
      }, {
        "name" : "outOfScopeUses",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Highlight technology that the MLModel might easily be confused with, or related contexts that users could try to apply the MLModel to.",
        "optional" : true
      } ]
    }, {
      "type" : "record",
      "name" : "MLModelFactorPrompts",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "Prompts which affect the performance of the MLModel",
      "fields" : [ {
        "name" : "relevantFactors",
        "type" : {
          "type" : "array",
          "items" : {
            "type" : "record",
            "name" : "MLModelFactors",
            "doc" : "Factors affecting the performance of the MLModel.",
            "fields" : [ {
              "name" : "groups",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "Groups refers to distinct categories with similar characteristics that are present in the evaluation data instances.\nFor human-centric machine learning MLModels, groups are people who share one or multiple characteristics.",
              "optional" : true
            }, {
              "name" : "instrumentation",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "The performance of a MLModel can vary depending on what instruments were used to capture the input to the MLModel.\nFor example, a face detection model may perform differently depending on the camera’s hardware and software,\nincluding lens, image stabilization, high dynamic range techniques, and background blurring for portrait mode.",
              "optional" : true
            }, {
              "name" : "environment",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "A further factor affecting MLModel performance is the environment in which it is deployed.",
              "optional" : true
            } ]
          }
        },
        "doc" : "What are foreseeable salient factors for which MLModel performance may vary, and how were these determined?",
        "optional" : true
      }, {
        "name" : "evaluationFactors",
        "type" : {
          "type" : "array",
          "items" : "MLModelFactors"
        },
        "doc" : "Which factors are being reported, and why were these chosen?",
        "optional" : true
      } ]
    }, {
      "type" : "record",
      "name" : "Metrics",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "Metrics to be featured for the MLModel.",
      "fields" : [ {
        "name" : "performanceMeasures",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Measures of MLModel performance",
        "optional" : true
      }, {
        "name" : "decisionThreshold",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Decision Thresholds used (if any)?",
        "optional" : true
      } ]
    }, {
      "type" : "record",
      "name" : "EvaluationData",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "All referenced datasets would ideally point to any set of documents that provide visibility into the source and composition of the dataset.",
      "fields" : [ {
        "name" : "evaluationData",
        "type" : {
          "type" : "array",
          "items" : {
            "type" : "record",
            "name" : "BaseData",
            "doc" : "BaseData record",
            "fields" : [ {
              "name" : "dataset",
              "type" : "com.linkedin.common.DatasetUrn",
              "doc" : "What dataset were used in the MLModel?"
            }, {
              "name" : "motivation",
              "type" : "string",
              "doc" : "Why was this dataset chosen?",
              "optional" : true
            }, {
              "name" : "preProcessing",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "How was the data preprocessed (e.g., tokenization of sentences, cropping of images, any filtering such as dropping images without faces)?",
              "optional" : true
            } ]
          }
        },
        "doc" : "Details on the dataset(s) used for the quantitative analyses in the MLModel"
      } ]
    }, {
      "type" : "record",
      "name" : "TrainingData",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "Ideally, the MLModel card would contain as much information about the training data as the evaluation data. However, there might be cases where it is not feasible to provide this level of detailed information about the training data. For example, the data may be proprietary, or require a non-disclosure agreement. In these cases, we advocate for basic details about the distributions over groups in the data, as well as any other details that could inform stakeholders on the kinds of biases the model may have encoded.",
      "fields" : [ {
        "name" : "trainingData",
        "type" : {
          "type" : "array",
          "items" : "BaseData"
        },
        "doc" : "Details on the dataset(s) used for training the MLModel"
      } ]
    }, {
      "type" : "record",
      "name" : "QuantitativeAnalyses",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "Quantitative analyses should be disaggregated, that is, broken down by the chosen factors. Quantitative analyses should provide the results of evaluating the MLModel according to the chosen metrics, providing confidence interval values when possible.",
      "fields" : [ {
        "name" : "unitaryResults",
        "type" : {
          "type" : "typeref",
          "name" : "ResultsType",
          "doc" : "A union of all supported metadata aspects for ResultsType",
          "ref" : [ "string" ]
        },
        "doc" : "Link to a dashboard with results showing how the MLModel performed with respect to each factor",
        "optional" : true
      }, {
        "name" : "intersectionalResults",
        "type" : "ResultsType",
        "doc" : "Link to a dashboard with results showing how the MLModel performed with respect to the intersection of evaluated factors?",
        "optional" : true
      } ]
    }, {
      "type" : "record",
      "name" : "EthicalConsiderations",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "This section is intended to demonstrate the ethical considerations that went into MLModel development, surfacing ethical challenges and solutions to stakeholders.",
      "fields" : [ {
        "name" : "data",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Does the MLModel use any sensitive data (e.g., protected classes)?",
        "optional" : true
      }, {
        "name" : "humanLife",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : " Is the MLModel intended to inform decisions about matters central to human life or flourishing – e.g., health or safety? Or could it be used in such a way?",
        "optional" : true
      }, {
        "name" : "mitigations",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "What risk mitigation strategies were used during MLModel development?",
        "optional" : true
      }, {
        "name" : "risksAndHarms",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "What risks may be present in MLModel usage? Try to identify the potential recipients, likelihood, and magnitude of harms. If these cannot be determined, note that they were considered but remain unknown.",
        "optional" : true
      }, {
        "name" : "useCases",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Are there any known MLModel use cases that are especially fraught? This may connect directly to the intended use section",
        "optional" : true
      } ]
    }, {
      "type" : "record",
      "name" : "CaveatsAndRecommendations",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "This section should list additional concerns that were not covered in the previous sections. For example, did the results suggest any further testing? Were there any relevant groups that were not represented in the evaluation dataset? Are there additional recommendations for model use?",
      "fields" : [ {
        "name" : "caveats",
        "type" : {
          "type" : "record",
          "name" : "CaveatDetails",
          "doc" : "This section should list additional concerns that were not covered in the previous sections. For example, did the results suggest any further testing? Were there any relevant groups that were not represented in the evaluation dataset? Are there additional recommendations for model use?",
          "fields" : [ {
            "name" : "needsFurtherTesting",
            "type" : "boolean",
            "doc" : "Did the results suggest any further testing?",
            "optional" : true
          }, {
            "name" : "caveatDescription",
            "type" : "string",
            "doc" : "Caveat Description\nFor ex: Given gender classes are binary (male/not male), which we include as male/female. Further work needed to evaluate across a spectrum of genders.",
            "optional" : true
          }, {
            "name" : "groupsNotRepresented",
            "type" : {
              "type" : "array",
              "items" : "string"
            },
            "doc" : "Relevant groups that were not represented in the evaluation dataset?",
            "optional" : true
          } ]
        },
        "doc" : "This section should list additional concerns that were not covered in the previous sections. For example, did the results suggest any further testing? Were there any relevant groups that were not represented in the evaluation dataset?",
        "optional" : true
      }, {
        "name" : "recommendations",
        "type" : "string",
        "doc" : "Recommendations on where this MLModel should be used.",
        "optional" : true
      }, {
        "name" : "idealDatasetCharacteristics",
        "type" : {
          "type" : "array",
          "items" : "string"
        },
        "doc" : "Ideal characteristics of an evaluation dataset for this MLModel",
        "optional" : true
      } ]
    }, "com.linkedin.common.InstitutionalMemory", {
      "type" : "record",
      "name" : "SourceCode",
      "namespace" : "com.linkedin.ml.metadata",
      "doc" : "Source Code",
      "fields" : [ {
        "name" : "sourceCode",
        "type" : {
          "type" : "array",
          "items" : {
            "type" : "record",
            "name" : "SourceCodeUrl",
            "doc" : "Source Code Url Entity",
            "fields" : [ {
              "name" : "type",
              "type" : {
                "type" : "enum",
                "name" : "SourceCodeUrlType",
                "symbols" : [ "ML_MODEL_SOURCE_CODE", "TRAINING_PIPELINE_SOURCE_CODE", "EVALUATION_PIPELINE_SOURCE_CODE" ]
              },
              "doc" : "Source Code Url Types"
            }, {
              "name" : "sourceCodeUrl",
              "type" : "com.linkedin.common.Url",
              "doc" : "Source Code Url"
            } ]
          }
        },
        "doc" : "Source Code along with types"
      } ]
    }, "com.linkedin.common.Status", "com.linkedin.common.Cost", "com.linkedin.common.Deprecation" ]
  }, {
    "type" : "record",
    "name" : "AggregationMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "name",
      "type" : "string",
      "doc" : "The name of the aggregation, e.g, platform, origin"
    }, {
      "name" : "aggregations",
      "type" : {
        "type" : "map",
        "values" : "long"
      },
      "doc" : "List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc"
    } ]
  }, {
    "type" : "record",
    "name" : "AutoCompleteResult",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the auto complete result",
    "fields" : [ {
      "name" : "query",
      "type" : "string",
      "doc" : "The original chars typed by user"
    }, {
      "name" : "suggestions",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "A list of typeahead suggestions"
    } ]
  }, {
    "type" : "enum",
    "name" : "Condition",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The matching condition in a filter criterion",
    "symbols" : [ "CONTAIN", "END_WITH", "EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "START_WITH" ],
    "symbolDocs" : {
      "CONTAIN" : "Represent the relation: String field contains value, e.g. name contains Profile",
      "END_WITH" : "Represent the relation: String field ends with value, e.g. name ends with Event",
      "EQUAL" : "Represent the relation: field = value, e.g. platform = hdfs",
      "GREATER_THAN" : "Represent the relation greater than, e.g. ownerCount > 5",
      "GREATER_THAN_OR_EQUAL_TO" : "Represent the relation greater than or equal to, e.g. ownerCount >= 5",
      "LESS_THAN" : "Represent the relation less than, e.g. ownerCount < 3",
      "LESS_THAN_OR_EQUAL_TO" : "Represent the relation less than or equal to, e.g. ownerCount <= 3",
      "START_WITH" : "Represent the relation: String field starts with value, e.g. name starts with PageView"
    }
  }, {
    "type" : "record",
    "name" : "Criterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "A criterion for matching a field with given value",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that the criterion refers to"
    }, {
      "name" : "value",
      "type" : "string",
      "doc" : "The value of the intended field"
    }, {
      "name" : "condition",
      "type" : "Condition",
      "doc" : "The condition for the criterion, e.g. EQUAL, START_WITH",
      "default" : "EQUAL"
    } ]
  }, {
    "type" : "record",
    "name" : "Filter",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The filter for finding an record or a collection of records",
    "fields" : [ {
      "name" : "criteria",
      "type" : {
        "type" : "array",
        "items" : "Criterion"
      },
      "doc" : "A list of criteria the filter applies to the query"
    } ]
  }, {
    "type" : "record",
    "name" : "MatchMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "matchedFields",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "MatchedField",
          "fields" : [ {
            "name" : "name",
            "type" : "string",
            "doc" : "Matched field name"
          }, {
            "name" : "value",
            "type" : "string",
            "doc" : "Matched field value"
          } ]
        }
      },
      "doc" : "Matched field name and values"
    } ]
  }, "com.linkedin.metadata.query.MatchedField", {
    "type" : "record",
    "name" : "SearchResultMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the search result",
    "fields" : [ {
      "name" : "searchResultMetadatas",
      "type" : {
        "type" : "array",
        "items" : "AggregationMetadata"
      },
      "doc" : "A list of search result metadata such as aggregations"
    }, {
      "name" : "urns",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.Urn"
      },
      "doc" : "A list of urns corresponding to search documents (in order) as returned by the search index"
    }, {
      "name" : "matches",
      "type" : {
        "type" : "array",
        "items" : "MatchMetadata"
      },
      "doc" : "A list of match metadata for each search result, containing the list of fields in the search document that matched the query",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "SortCriterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "Sort order along with the field to sort it on, to be applied to the results.",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that sorting has to be applied to"
    }, {
      "name" : "order",
      "type" : {
        "type" : "enum",
        "name" : "SortOrder",
        "doc" : "The order used to sort the results",
        "symbols" : [ "ASCENDING", "DESCENDING" ],
        "symbolDocs" : {
          "ASCENDING" : "If results need to be sorted in ascending order",
          "DESCENDING" : "If results need to be sorted in descending order"
        }
      },
      "doc" : "The order to sort the results i.e. ASCENDING or DESCENDING"
    } ]
  }, "com.linkedin.metadata.query.SortOrder", {
    "type" : "record",
    "name" : "BackfillResult",
    "namespace" : "com.linkedin.metadata.restli",
    "doc" : "The model for the result of a backfill",
    "fields" : [ {
      "name" : "entities",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "BackfillResultEntity",
          "fields" : [ {
            "name" : "urn",
            "type" : "com.linkedin.common.Urn",
            "doc" : "Urn of the backfilled entity"
          }, {
            "name" : "aspects",
            "type" : {
              "type" : "array",
              "items" : "string"
            },
            "doc" : "List of the aspects backfilled for the entity"
          } ]
        }
      },
      "doc" : "List of backfilled entities"
    } ]
  }, "com.linkedin.metadata.restli.BackfillResultEntity", {
    "type" : "record",
    "name" : "MLModelSnapshot",
    "namespace" : "com.linkedin.metadata.snapshot",
    "doc" : "MLModel Snapshot entity details.",
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.MLModelUrn",
      "doc" : "URN for the entity the metadata snapshot is associated with."
    }, {
      "name" : "aspects",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.metadata.aspect.MLModelAspect"
      },
      "doc" : "The list of metadata aspects associated with the MLModel. Depending on the use case, this can either be all, or a selection, of supported aspects."
    } ]
  }, {
    "type" : "record",
    "name" : "MLModel",
    "namespace" : "com.linkedin.ml",
    "doc" : "MlModel spec. for a model store. A collection of MlModel metadata schema that can evolve over time.",
    "include" : [ {
      "type" : "record",
      "name" : "MLModelKey",
      "doc" : "Key for MLModel resource",
      "fields" : [ {
        "name" : "platform",
        "type" : "com.linkedin.common.DataPlatformUrn",
        "doc" : "Standardized platform urn where ML Model is defined. The data platform Urn (urn:li:platform:{dataScienceplatform_name})",
        "validate" : {
          "com.linkedin.dataset.rest.validator.DataPlatformValidator" : { }
        }
      }, {
        "name" : "name",
        "type" : "string",
        "doc" : "ML Model name e.g. {db}.{table}, /dir/subdir/{name}, or {name}",
        "validate" : {
          "strlen" : {
            "max" : 500,
            "min" : 1
          }
        }
      }, {
        "name" : "origin",
        "type" : "com.linkedin.common.FabricType",
        "doc" : "Fabric type where ML Model belongs to or where it was generated."
      } ]
    }, "com.linkedin.common.ChangeAuditStamps" ],
    "fields" : [ {
      "name" : "id",
      "type" : "long",
      "doc" : "Model unique identifier. System assigned value when a new model is created.",
      "default" : 0
    }, {
      "name" : "urn",
      "type" : "com.linkedin.common.MLModelUrn",
      "doc" : "Model urn"
    }, {
      "name" : "description",
      "type" : "string",
      "doc" : "Description for model",
      "default" : ""
    }, {
      "name" : "tags",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "tags for searching model",
      "default" : [ ]
    }, {
      "name" : "ownership",
      "type" : "com.linkedin.common.Ownership",
      "doc" : "Ownership Info",
      "optional" : true
    }, {
      "name" : "mlModelProperties",
      "type" : "com.linkedin.ml.metadata.MLModelProperties",
      "doc" : "MLModel Properties",
      "optional" : true
    }, {
      "name" : "intendedUse",
      "type" : "com.linkedin.ml.metadata.IntendedUse",
      "doc" : "Intended Use",
      "optional" : true
    }, {
      "name" : "mlModelFactors",
      "type" : "com.linkedin.ml.metadata.MLModelFactors",
      "doc" : "MLModel Factors",
      "optional" : true,
      "deprecated" : "Use MLModelFactorPrompts instead"
    }, {
      "name" : "mlModelFactorPrompts",
      "type" : "com.linkedin.ml.metadata.MLModelFactorPrompts",
      "optional" : true
    }, {
      "name" : "metrics",
      "type" : "com.linkedin.ml.metadata.Metrics",
      "doc" : "Metrics",
      "optional" : true
    }, {
      "name" : "evaluationData",
      "type" : "com.linkedin.ml.metadata.EvaluationData",
      "doc" : "Evaluation Data",
      "optional" : true
    }, {
      "name" : "trainingData",
      "type" : "com.linkedin.ml.metadata.TrainingData",
      "doc" : "Training Data",
      "optional" : true
    }, {
      "name" : "quantitativeAnalyses",
      "type" : "com.linkedin.ml.metadata.QuantitativeAnalyses",
      "doc" : "Quantitative Analyses",
      "optional" : true
    }, {
      "name" : "ethicalConsiderations",
      "type" : "com.linkedin.ml.metadata.EthicalConsiderations",
      "doc" : "Ethical Considerations",
      "optional" : true
    }, {
      "name" : "caveatsAndRecommendations",
      "type" : "com.linkedin.ml.metadata.CaveatsAndRecommendations",
      "doc" : "Caveats and Recommendations",
      "optional" : true
    }, {
      "name" : "institutionalMemory",
      "type" : "com.linkedin.common.InstitutionalMemory",
      "doc" : "Institutional Memory",
      "optional" : true
    }, {
      "name" : "sourceCode",
      "type" : "com.linkedin.ml.metadata.SourceCode",
      "doc" : "Source Code",
      "optional" : true
    }, {
      "name" : "status",
      "type" : "com.linkedin.common.Status",
      "doc" : "Status",
      "optional" : true
    }, {
      "name" : "cost",
      "type" : "com.linkedin.common.Cost",
      "doc" : "Cost",
      "optional" : true
    }, {
      "name" : "deprecation",
      "type" : "com.linkedin.common.Deprecation",
      "doc" : "Deprecation",
      "optional" : true
    } ]
  }, "com.linkedin.ml.MLModelKey", "com.linkedin.ml.metadata.BaseData", "com.linkedin.ml.metadata.CaveatDetails", "com.linkedin.ml.metadata.CaveatsAndRecommendations", "com.linkedin.ml.metadata.EthicalConsiderations", "com.linkedin.ml.metadata.EvaluationData", "com.linkedin.ml.metadata.HyperParameterValueType", "com.linkedin.ml.metadata.IntendedUse", "com.linkedin.ml.metadata.IntendedUserType", "com.linkedin.ml.metadata.MLModelFactorPrompts", "com.linkedin.ml.metadata.MLModelFactors", "com.linkedin.ml.metadata.MLModelProperties", "com.linkedin.ml.metadata.Metrics", "com.linkedin.ml.metadata.QuantitativeAnalyses", "com.linkedin.ml.metadata.ResultsType", "com.linkedin.ml.metadata.SourceCode", "com.linkedin.ml.metadata.SourceCodeUrl", "com.linkedin.ml.metadata.SourceCodeUrlType", "com.linkedin.ml.metadata.TrainingData", {
    "type" : "record",
    "name" : "EmptyRecord",
    "namespace" : "com.linkedin.restli.common",
    "doc" : "An literally empty record.  Intended as a marker to indicate the absence of content where a record type is required.  If used the underlying DataMap *must* be empty, EmptyRecordValidator is provided to help enforce this.  For example,  CreateRequest extends Request<EmptyRecord> to indicate it has no response body.   Also, a ComplexKeyResource implementation that has no ParamKey should have a signature like XyzResource implements ComplexKeyResource<XyzKey, EmptyRecord, Xyz>.",
    "fields" : [ ],
    "validate" : {
      "com.linkedin.restli.common.EmptyRecordValidator" : { }
    }
  } ],
  "schema" : {
    "name" : "mlModels",
    "namespace" : "com.linkedin.ml",
    "path" : "/mlModels",
    "schema" : "com.linkedin.ml.MLModel",
    "doc" : "generated from: com.linkedin.metadata.resources.ml.MLModels",
    "collection" : {
      "identifier" : {
        "name" : "mlmodel",
        "type" : "com.linkedin.ml.MLModelKey",
        "params" : "com.linkedin.restli.common.EmptyRecord"
      },
      "supports" : [ "batch_get", "get", "get_all" ],
      "methods" : [ {
        "method" : "get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      }, {
        "method" : "batch_get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      }, {
        "method" : "get_all",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "pagingSupported" : true
      } ],
      "finders" : [ {
        "name" : "search",
        "parameters" : [ {
          "name" : "input",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "metadata" : {
          "type" : "com.linkedin.metadata.query.SearchResultMetadata"
        },
        "pagingSupported" : true
      } ],
      "actions" : [ {
        "name" : "autocomplete",
        "parameters" : [ {
          "name" : "query",
          "type" : "string"
        }, {
          "name" : "field",
          "type" : "string"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter"
        }, {
          "name" : "limit",
          "type" : "int"
        } ],
        "returns" : "com.linkedin.metadata.query.AutoCompleteResult"
      }, {
        "name" : "backfill",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.restli.BackfillResult"
      }, {
        "name" : "getSnapshot",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.snapshot.MLModelSnapshot"
      }, {
        "name" : "ingest",
        "parameters" : [ {
          "name" : "snapshot",
          "type" : "com.linkedin.metadata.snapshot.MLModelSnapshot"
        } ]
      } ],
      "entity" : {
        "path" : "/mlModels/{mlmodel}",
        "subresources" : [ {
          "name" : "caveatsAndRecommendations",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/caveatsAndRecommendations",
          "schema" : "com.linkedin.ml.metadata.CaveatsAndRecommendations",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/caveatsAndRecommendations\n\ngenerated from: com.linkedin.metadata.resources.ml.CaveatsAndRecommendationsResource",
          "collection" : {
            "identifier" : {
              "name" : "caveatsAndRecommendationsId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/caveatsAndRecommendations/{caveatsAndRecommendationsId}"
            }
          }
        }, {
          "name" : "cost",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/cost",
          "schema" : "com.linkedin.common.Cost",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/cost\n\ngenerated from: com.linkedin.metadata.resources.ml.CostResource",
          "collection" : {
            "identifier" : {
              "name" : "costId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/cost/{costId}"
            }
          }
        }, {
          "name" : "deprecation",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/deprecation",
          "schema" : "com.linkedin.common.Deprecation",
          "doc" : "Rest.li entry point: /mlmodels/{mlModelKey}/deprecation\n\ngenerated from: com.linkedin.metadata.resources.ml.DeprecationResource",
          "collection" : {
            "identifier" : {
              "name" : "deprecationId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/deprecation/{deprecationId}"
            }
          }
        }, {
          "name" : "ethicalConsiderations",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/ethicalConsiderations",
          "schema" : "com.linkedin.ml.metadata.EthicalConsiderations",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/ethicalConsiderations\n\ngenerated from: com.linkedin.metadata.resources.ml.EthicalConsiderationsResource",
          "collection" : {
            "identifier" : {
              "name" : "ethicalConsiderationsId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/ethicalConsiderations/{ethicalConsiderationsId}"
            }
          }
        }, {
          "name" : "evaluationData",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/evaluationData",
          "schema" : "com.linkedin.ml.metadata.EvaluationData",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/evaluationData\n\ngenerated from: com.linkedin.metadata.resources.ml.EvaluationDataResource",
          "collection" : {
            "identifier" : {
              "name" : "evaluationDataId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/evaluationData/{evaluationDataId}"
            }
          }
        }, {
          "name" : "institutionalMemory",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/institutionalMemory",
          "schema" : "com.linkedin.common.InstitutionalMemory",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/institutionalMemory\n\ngenerated from: com.linkedin.metadata.resources.ml.InstitutionalMemoryResource",
          "collection" : {
            "identifier" : {
              "name" : "institutionalMemoryId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/institutionalMemory/{institutionalMemoryId}"
            }
          }
        }, {
          "name" : "intendedUse",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/intendedUse",
          "schema" : "com.linkedin.ml.metadata.IntendedUse",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/intendedUse\n\ngenerated from: com.linkedin.metadata.resources.ml.IntendedUseResource",
          "collection" : {
            "identifier" : {
              "name" : "intendedUseId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/intendedUse/{intendedUseId}"
            }
          }
        }, {
          "name" : "metrics",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/metrics",
          "schema" : "com.linkedin.ml.metadata.Metrics",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/metrics\n\ngenerated from: com.linkedin.metadata.resources.ml.MetricsResource",
          "collection" : {
            "identifier" : {
              "name" : "metricsId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/metrics/{metricsId}"
            }
          }
        }, {
          "name" : "mlModelFactorPrompts",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/mlModelFactorPrompts",
          "schema" : "com.linkedin.ml.metadata.MLModelFactorPrompts",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/mlModelFactorPrompts\n\ngenerated from: com.linkedin.metadata.resources.ml.MLModelFactorPromptsResource",
          "collection" : {
            "identifier" : {
              "name" : "mlModelFactorPromptsId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/mlModelFactorPrompts/{mlModelFactorPromptsId}"
            }
          }
        }, {
          "name" : "ownership",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/ownership",
          "schema" : "com.linkedin.common.Ownership",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/ownership\n\ngenerated from: com.linkedin.metadata.resources.ml.OwnershipResource",
          "collection" : {
            "identifier" : {
              "name" : "ownershipId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/ownership/{ownershipId}"
            }
          }
        }, {
          "name" : "quantitativeAnalyses",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/quantitativeAnalyses",
          "schema" : "com.linkedin.ml.metadata.QuantitativeAnalyses",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/quantitativeAnalyses\n\ngenerated from: com.linkedin.metadata.resources.ml.QuantitativeAnalysesResource",
          "collection" : {
            "identifier" : {
              "name" : "quantitativeAnalysesId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/quantitativeAnalyses/{quantitativeAnalysesId}"
            }
          }
        }, {
          "name" : "sourceCode",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/sourceCode",
          "schema" : "com.linkedin.ml.metadata.SourceCode",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/sourceCode\n\ngenerated from: com.linkedin.metadata.resources.ml.SourceCodeResource",
          "collection" : {
            "identifier" : {
              "name" : "sourceCodeId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/sourceCode/{sourceCodeId}"
            }
          }
        }, {
          "name" : "trainingData",
          "namespace" : "com.linkedin.ml",
          "path" : "/mlModels/{mlmodel}/trainingData",
          "schema" : "com.linkedin.ml.metadata.TrainingData",
          "doc" : "Rest.li entry point: /mlModels/{mlModelKey}/trainingData\n\ngenerated from: com.linkedin.metadata.resources.ml.TrainingDataResource",
          "collection" : {
            "identifier" : {
              "name" : "trainingDataId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/mlModels/{mlmodel}/trainingData/{trainingDataId}"
            }
          }
        } ]
      }
    }
  }
}
{
  "models" : [ {
    "type" : "typeref",
    "name" : "ChartDataSourceType",
    "namespace" : "com.linkedin.chart",
    "doc" : "Input source type for a chart such as dataset or metric",
    "ref" : [ {
      "type" : "typeref",
      "name" : "DatasetUrn",
      "namespace" : "com.linkedin.common",
      "doc" : "Standardized dataset identifier.",
      "ref" : "string",
      "java" : {
        "class" : "com.linkedin.common.urn.DatasetUrn"
      },
      "validate" : {
        "com.linkedin.common.validator.TypedUrnValidator" : {
          "accessible" : true,
          "constructable" : true,
          "doc" : "Standardized dataset identifier.",
          "entityType" : "dataset",
          "fields" : [ {
            "doc" : "Standardized platform urn where dataset is defined.",
            "name" : "platform",
            "type" : "com.linkedin.common.urn.DataPlatformUrn"
          }, {
            "doc" : "Dataset native name e.g. <db>.<table>, /dir/subdir/<name>, or <name>",
            "maxLength" : 210,
            "name" : "datasetName",
            "type" : "string"
          }, {
            "doc" : "data layer where dataset belongs to or where it was generated.",
            "name" : "layer",
            "type" : "string"
          } ],
          "maxLength" : 284,
          "name" : "Dataset",
          "namespace" : "li",
          "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
          "owningTeam" : "urn:li:internalTeam:datahub"
        }
      }
    } ]
  }, {
    "type" : "record",
    "name" : "ChartInfo",
    "namespace" : "com.linkedin.chart",
    "doc" : "Information about a chart",
    "include" : [ {
      "type" : "record",
      "name" : "CustomProperties",
      "namespace" : "com.linkedin.common",
      "doc" : "Misc. properties about an entity.",
      "fields" : [ {
        "name" : "customProperties",
        "type" : {
          "type" : "map",
          "values" : "string"
        },
        "doc" : "Custom property bag.",
        "default" : { }
      } ]
    }, {
      "type" : "record",
      "name" : "ExternalReference",
      "namespace" : "com.linkedin.common",
      "doc" : "A reference to an external platform.",
      "fields" : [ {
        "name" : "externalUrl",
        "type" : {
          "type" : "typeref",
          "name" : "Url",
          "ref" : "string",
          "java" : {
            "class" : "com.linkedin.common.url.Url",
            "coercerClass" : "com.linkedin.common.url.UrlCoercer"
          }
        },
        "doc" : "URL where the reference exist",
        "optional" : true
      } ]
    } ],
    "fields" : [ {
      "name" : "title",
      "type" : "string",
      "doc" : "Title of the chart"
    }, {
      "name" : "description",
      "type" : "string",
      "doc" : "Detailed description about the chart"
    }, {
      "name" : "lastModified",
      "type" : {
        "type" : "record",
        "name" : "ChangeAuditStamps",
        "namespace" : "com.linkedin.common",
        "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations",
        "fields" : [ {
          "name" : "created",
          "type" : {
            "type" : "record",
            "name" : "AuditStamp",
            "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
            "fields" : [ {
              "name" : "time",
              "type" : {
                "type" : "typeref",
                "name" : "Time",
                "doc" : "Number of milliseconds since midnight, January 1, 1970 UTC. It must be a positive number",
                "ref" : "long"
              },
              "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
            }, {
              "name" : "actor",
              "type" : {
                "type" : "typeref",
                "name" : "Urn",
                "ref" : "string",
                "java" : {
                  "class" : "com.linkedin.common.urn.Urn"
                }
              },
              "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."
            }, {
              "name" : "impersonator",
              "type" : "Urn",
              "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
              "optional" : true
            } ]
          },
          "doc" : "An AuditStamp corresponding to the creation of this resource/association/sub-resource"
        }, {
          "name" : "lastModified",
          "type" : "AuditStamp",
          "doc" : "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created"
        }, {
          "name" : "deleted",
          "type" : "AuditStamp",
          "doc" : "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.",
          "optional" : true
        } ]
      },
      "doc" : "Captures information about who created/last modified/deleted this chart and when"
    }, {
      "name" : "chartUrl",
      "type" : "com.linkedin.common.Url",
      "doc" : "URL for the chart. This could be used as an external link on DataHub to allow users access/view the chart",
      "optional" : true
    }, {
      "name" : "inputs",
      "type" : {
        "type" : "array",
        "items" : "ChartDataSourceType"
      },
      "doc" : "Data sources for the chart",
      "optional" : true
    }, {
      "name" : "type",
      "type" : {
        "type" : "enum",
        "name" : "ChartType",
        "doc" : "The various types of charts",
        "symbols" : [ "BAR", "PIE", "SCATTER", "TABLE", "TEXT", "LINE", "AREA", "HISTOGRAM", "BOX_PLOT" ],
        "symbolDocs" : {
          "BAR" : "Chart showing a Bar chart",
          "PIE" : "Chart showing a Pie chart",
          "SCATTER" : "Chart showing a Scatter plot",
          "TABLE" : "Chart showing a table",
          "TEXT" : "Chart showing Markdown formatted text"
        }
      },
      "doc" : "Type of the chart",
      "optional" : true
    }, {
      "name" : "access",
      "type" : {
        "type" : "enum",
        "name" : "AccessLevel",
        "namespace" : "com.linkedin.common",
        "doc" : "The various access levels",
        "symbols" : [ "PUBLIC", "PRIVATE" ],
        "symbolDocs" : {
          "PRIVATE" : "Private availability to certain set of users",
          "PUBLIC" : "Publicly available access level"
        }
      },
      "doc" : "Access level for the chart",
      "optional" : true
    }, {
      "name" : "lastRefreshed",
      "type" : "com.linkedin.common.Time",
      "doc" : "The time when this chart last refreshed",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "ChartQuery",
    "namespace" : "com.linkedin.chart",
    "doc" : "Information for chart query which is used for getting data of the chart",
    "fields" : [ {
      "name" : "rawQuery",
      "type" : "string",
      "doc" : "Raw query to build a chart from input datasets"
    }, {
      "name" : "type",
      "type" : {
        "type" : "enum",
        "name" : "ChartQueryType",
        "symbols" : [ "LOOKML", "SQL" ],
        "symbolDocs" : {
          "LOOKML" : "LookML queries",
          "SQL" : "SQL type queries"
        }
      },
      "doc" : "Chart query type"
    } ]
  }, "com.linkedin.chart.ChartQueryType", "com.linkedin.chart.ChartType", "com.linkedin.common.AccessLevel", "com.linkedin.common.AuditStamp", "com.linkedin.common.ChangeAuditStamps", {
    "type" : "typeref",
    "name" : "ChartUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized chart identifier",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.ChartUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized chart identifier",
        "entityType" : "chart",
        "fields" : [ {
          "doc" : "The name of the dashboard tool such as looker, redash etc.",
          "maxLength" : 20,
          "name" : "dashboardTool",
          "type" : "string"
        }, {
          "doc" : "Unique id for the chart. This id should be globally unique for a dashboarding tool even when there are multiple deployments of it. As an example, chart URL could be used here for Looker such as 'looker.linkedin.com/looks/1234'",
          "maxLength" : 200,
          "name" : "chartId",
          "type" : "string"
        } ],
        "maxLength" : 236,
        "name" : "Chart",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, "com.linkedin.common.CustomProperties", "com.linkedin.common.DatasetUrn", "com.linkedin.common.ExternalReference", {
    "type" : "record",
    "name" : "GlobalTags",
    "namespace" : "com.linkedin.common",
    "doc" : "Tag aspect used for applying tags to an entity",
    "fields" : [ {
      "name" : "tags",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "TagAssociation",
          "doc" : "Properties of an applied tag. For now, just an Urn. In the future we can extend this with other properties, e.g.\npropagation parameters.",
          "fields" : [ {
            "name" : "tag",
            "type" : {
              "type" : "typeref",
              "name" : "TagUrn",
              "doc" : "Globally defined tag",
              "ref" : "string",
              "java" : {
                "class" : "com.linkedin.common.urn.TagUrn"
              },
              "validate" : {
                "com.linkedin.common.validator.TypedUrnValidator" : {
                  "accessible" : true,
                  "constructable" : true,
                  "doc" : "Globally defined tags",
                  "entityType" : "tag",
                  "fields" : [ {
                    "doc" : "tag name",
                    "maxLength" : 200,
                    "name" : "name",
                    "type" : "string"
                  } ],
                  "maxLength" : 220,
                  "name" : "Tag",
                  "namespace" : "li",
                  "owners" : [ ],
                  "owningTeam" : "urn:li:internalTeam:datahub"
                }
              }
            },
            "doc" : "Urn of the applied tag"
          } ]
        }
      },
      "doc" : "Tags associated with a given entity"
    } ]
  }, {
    "type" : "record",
    "name" : "Owner",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information",
    "fields" : [ {
      "name" : "owner",
      "type" : "Urn",
      "doc" : "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\n(Caveat: only corpuser is currently supported in the frontend.)"
    }, {
      "name" : "type",
      "type" : {
        "type" : "enum",
        "name" : "OwnershipType",
        "doc" : "Owner category or owner role",
        "symbols" : [ "DEVELOPER", "DATAOWNER", "DELEGATE", "PRODUCER", "CONSUMER", "STAKEHOLDER" ],
        "symbolDocs" : {
          "CONSUMER" : "A person, group, or service that consumes the data",
          "DATAOWNER" : "A person or group that is owning the data",
          "DELEGATE" : "A person or a group that overseas the operation, e.g. a DBA or SRE.",
          "DEVELOPER" : "A person or group that is in charge of developing the code",
          "PRODUCER" : "A person, group, or service that produces/generates the data",
          "STAKEHOLDER" : "A person or a group that has direct business interest"
        }
      },
      "doc" : "The type of the ownership"
    }, {
      "name" : "source",
      "type" : {
        "type" : "record",
        "name" : "OwnershipSource",
        "doc" : "Source/provider of the ownership information",
        "fields" : [ {
          "name" : "type",
          "type" : {
            "type" : "enum",
            "name" : "OwnershipSourceType",
            "symbols" : [ "AUDIT", "DATABASE", "FILE_SYSTEM", "ISSUE_TRACKING_SYSTEM", "MANUAL", "SERVICE", "SOURCE_CONTROL", "OTHER" ],
            "symbolDocs" : {
              "AUDIT" : "Auditing system or audit logs",
              "DATABASE" : "Database, e.g. GRANTS table",
              "FILE_SYSTEM" : "File system, e.g. file/directory owner",
              "ISSUE_TRACKING_SYSTEM" : "Issue tracking system, e.g. Jira",
              "MANUAL" : "Manually provided by a user",
              "OTHER" : "Other sources",
              "SERVICE" : "Other ownership-like service, e.g. Nuage, ACL service etc",
              "SOURCE_CONTROL" : "SCM system, e.g. GIT, SVN"
            }
          },
          "doc" : "The type of the source"
        }, {
          "name" : "url",
          "type" : "string",
          "doc" : "A reference URL for the source",
          "optional" : true
        } ]
      },
      "doc" : "Source information for the ownership",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "Ownership",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information of an entity.",
    "fields" : [ {
      "name" : "owners",
      "type" : {
        "type" : "array",
        "items" : "Owner"
      },
      "doc" : "List of owners of the entity."
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "Audit stamp containing who last modified the record and when."
    } ]
  }, "com.linkedin.common.OwnershipSource", "com.linkedin.common.OwnershipSourceType", "com.linkedin.common.OwnershipType", {
    "type" : "record",
    "name" : "Status",
    "namespace" : "com.linkedin.common",
    "doc" : "The status metadata of an entity, e.g. dataset, metric, feature, etc.",
    "fields" : [ {
      "name" : "removed",
      "type" : "boolean",
      "doc" : "whether the entity is removed or not",
      "default" : false
    } ]
  }, "com.linkedin.common.TagAssociation", "com.linkedin.common.TagUrn", "com.linkedin.common.Time", "com.linkedin.common.Url", "com.linkedin.common.Urn", {
    "type" : "record",
    "name" : "Chart",
    "namespace" : "com.linkedin.dashboard",
    "doc" : "Metadata for a chart",
    "include" : [ {
      "type" : "record",
      "name" : "ChartKey",
      "doc" : "Key for chart resource",
      "fields" : [ {
        "name" : "tool",
        "type" : "string",
        "doc" : "The name of the dashboard tool such as looker, redash etc.",
        "validate" : {
          "strlen" : {
            "max" : 20,
            "min" : 1
          }
        }
      }, {
        "name" : "chartId",
        "type" : "string",
        "doc" : "Unique id for the chart. This id should be globally unique for a dashboarding tool even when there are multiple deployments of it. As an example, chart URL could be used here for Looker such as 'looker.linkedin.com/looks/1234'",
        "validate" : {
          "strlen" : {
            "max" : 200,
            "min" : 1
          }
        }
      } ]
    } ],
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.ChartUrn",
      "doc" : "Chart urn"
    }, {
      "name" : "info",
      "type" : "com.linkedin.chart.ChartInfo",
      "doc" : "Basic chart information",
      "optional" : true
    }, {
      "name" : "query",
      "type" : "com.linkedin.chart.ChartQuery",
      "doc" : "Information for the chart query which is used for getting data of the chart",
      "optional" : true
    }, {
      "name" : "ownership",
      "type" : "com.linkedin.common.Ownership",
      "doc" : "Ownership information for the chart",
      "optional" : true
    }, {
      "name" : "status",
      "type" : "com.linkedin.common.Status",
      "doc" : "Status information for the chart such as removed or not",
      "optional" : true
    }, {
      "name" : "globalTags",
      "type" : "com.linkedin.common.GlobalTags",
      "doc" : "List of global tags applied to the chart",
      "optional" : true
    } ]
  }, "com.linkedin.dashboard.ChartKey", {
    "type" : "typeref",
    "name" : "ChartAspect",
    "namespace" : "com.linkedin.metadata.aspect",
    "doc" : "A union of all supported metadata aspects for a Chart",
    "ref" : [ "com.linkedin.chart.ChartInfo", "com.linkedin.chart.ChartQuery", "com.linkedin.common.Ownership", "com.linkedin.common.Status", "com.linkedin.common.GlobalTags" ]
  }, {
    "type" : "record",
    "name" : "AggregationMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "name",
      "type" : "string",
      "doc" : "The name of the aggregation, e.g, platform, origin"
    }, {
      "name" : "aggregations",
      "type" : {
        "type" : "map",
        "values" : "long"
      },
      "doc" : "List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc"
    } ]
  }, {
    "type" : "record",
    "name" : "AutoCompleteResult",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the auto complete result",
    "fields" : [ {
      "name" : "query",
      "type" : "string",
      "doc" : "The original chars typed by user"
    }, {
      "name" : "suggestions",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "A list of typeahead suggestions"
    } ]
  }, {
    "type" : "record",
    "name" : "BrowseResult",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the result of a browse query",
    "fields" : [ {
      "name" : "entities",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "BrowseResultEntity",
          "doc" : "Data model for an entity returned as part of a browse query",
          "fields" : [ {
            "name" : "name",
            "type" : "string",
            "doc" : "Name of the entity",
            "optional" : true
          }, {
            "name" : "urn",
            "type" : "com.linkedin.common.Urn",
            "doc" : "URN of the entity"
          } ]
        }
      },
      "doc" : "A list of entities under the queried path"
    }, {
      "name" : "metadata",
      "type" : {
        "type" : "record",
        "name" : "BrowseResultMetadata",
        "doc" : "The model for browse result metadata",
        "fields" : [ {
          "name" : "path",
          "type" : "string",
          "doc" : "Path that is being browsed"
        }, {
          "name" : "groups",
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "record",
              "name" : "BrowseResultGroup",
              "fields" : [ {
                "name" : "name",
                "type" : "string",
                "doc" : "Name of the group"
              }, {
                "name" : "count",
                "type" : "long",
                "doc" : "Number of entities that can be reached from this path"
              } ]
            }
          },
          "doc" : "A list of groups and total number of entities inside those groups under the queried path",
          "default" : [ ]
        }, {
          "name" : "totalNumEntities",
          "type" : "long",
          "doc" : "Total number of entities we can reach from path"
        } ]
      },
      "doc" : "Metadata specific to the browse result of the queried path"
    }, {
      "name" : "from",
      "type" : "int",
      "doc" : "Offset of the first entity in the result"
    }, {
      "name" : "pageSize",
      "type" : "int",
      "doc" : "Size of each page in the result"
    }, {
      "name" : "numEntities",
      "type" : "int",
      "doc" : "The total number of entities directly under queried path"
    } ]
  }, "com.linkedin.metadata.query.BrowseResultEntity", "com.linkedin.metadata.query.BrowseResultGroup", "com.linkedin.metadata.query.BrowseResultMetadata", {
    "type" : "enum",
    "name" : "Condition",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The matching condition in a filter criterion",
    "symbols" : [ "CONTAIN", "END_WITH", "EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "START_WITH" ],
    "symbolDocs" : {
      "CONTAIN" : "Represent the relation: String field contains value, e.g. name contains Profile",
      "END_WITH" : "Represent the relation: String field ends with value, e.g. name ends with Event",
      "EQUAL" : "Represent the relation: field = value, e.g. platform = hdfs",
      "GREATER_THAN" : "Represent the relation greater than, e.g. ownerCount > 5",
      "GREATER_THAN_OR_EQUAL_TO" : "Represent the relation greater than or equal to, e.g. ownerCount >= 5",
      "LESS_THAN" : "Represent the relation less than, e.g. ownerCount < 3",
      "LESS_THAN_OR_EQUAL_TO" : "Represent the relation less than or equal to, e.g. ownerCount <= 3",
      "START_WITH" : "Represent the relation: String field starts with value, e.g. name starts with PageView"
    }
  }, {
    "type" : "record",
    "name" : "Criterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "A criterion for matching a field with given value",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that the criterion refers to"
    }, {
      "name" : "value",
      "type" : "string",
      "doc" : "The value of the intended field"
    }, {
      "name" : "condition",
      "type" : "Condition",
      "doc" : "The condition for the criterion, e.g. EQUAL, START_WITH",
      "default" : "EQUAL"
    } ]
  }, {
    "type" : "record",
    "name" : "Filter",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The filter for finding an record or a collection of records",
    "fields" : [ {
      "name" : "criteria",
      "type" : {
        "type" : "array",
        "items" : "Criterion"
      },
      "doc" : "A list of criteria the filter applies to the query"
    } ]
  }, {
    "type" : "record",
    "name" : "MatchMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "matchedFields",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "MatchedField",
          "fields" : [ {
            "name" : "name",
            "type" : "string",
            "doc" : "Matched field name"
          }, {
            "name" : "value",
            "type" : "string",
            "doc" : "Matched field value"
          } ]
        }
      },
      "doc" : "Matched field name and values"
    } ]
  }, "com.linkedin.metadata.query.MatchedField", {
    "type" : "record",
    "name" : "SearchResultMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the search result",
    "fields" : [ {
      "name" : "searchResultMetadatas",
      "type" : {
        "type" : "array",
        "items" : "AggregationMetadata"
      },
      "doc" : "A list of search result metadata such as aggregations"
    }, {
      "name" : "urns",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.Urn"
      },
      "doc" : "A list of urns corresponding to search documents (in order) as returned by the search index"
    }, {
      "name" : "matches",
      "type" : {
        "type" : "array",
        "items" : "MatchMetadata"
      },
      "doc" : "A list of match metadata for each search result, containing the list of fields in the search document that matched the query",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "SortCriterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "Sort order along with the field to sort it on, to be applied to the results.",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that sorting has to be applied to"
    }, {
      "name" : "order",
      "type" : {
        "type" : "enum",
        "name" : "SortOrder",
        "doc" : "The order used to sort the results",
        "symbols" : [ "ASCENDING", "DESCENDING" ],
        "symbolDocs" : {
          "ASCENDING" : "If results need to be sorted in ascending order",
          "DESCENDING" : "If results need to be sorted in descending order"
        }
      },
      "doc" : "The order to sort the results i.e. ASCENDING or DESCENDING"
    } ]
  }, "com.linkedin.metadata.query.SortOrder", {
    "type" : "record",
    "name" : "BackfillResult",
    "namespace" : "com.linkedin.metadata.restli",
    "doc" : "The model for the result of a backfill",
    "fields" : [ {
      "name" : "entities",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "BackfillResultEntity",
          "fields" : [ {
            "name" : "urn",
            "type" : "com.linkedin.common.Urn",
            "doc" : "Urn of the backfilled entity"
          }, {
            "name" : "aspects",
            "type" : {
              "type" : "array",
              "items" : "string"
            },
            "doc" : "List of the aspects backfilled for the entity"
          } ]
        }
      },
      "doc" : "List of backfilled entities"
    } ]
  }, "com.linkedin.metadata.restli.BackfillResultEntity", {
    "type" : "record",
    "name" : "ChartSnapshot",
    "namespace" : "com.linkedin.metadata.snapshot",
    "doc" : "A metadata snapshot for a specific Chart entity.",
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.ChartUrn",
      "doc" : "URN for the entity the metadata snapshot is associated with."
    }, {
      "name" : "aspects",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.metadata.aspect.ChartAspect"
      },
      "doc" : "The list of metadata aspects associated with the chart. Depending on the use case, this can either be all, or a selection, of supported aspects."
    } ]
  }, {
    "type" : "record",
    "name" : "EmptyRecord",
    "namespace" : "com.linkedin.restli.common",
    "doc" : "An literally empty record.  Intended as a marker to indicate the absence of content where a record type is required.  If used the underlying DataMap *must* be empty, EmptyRecordValidator is provided to help enforce this.  For example,  CreateRequest extends Request<EmptyRecord> to indicate it has no response body.   Also, a ComplexKeyResource implementation that has no ParamKey should have a signature like XyzResource implements ComplexKeyResource<XyzKey, EmptyRecord, Xyz>.",
    "fields" : [ ],
    "validate" : {
      "com.linkedin.restli.common.EmptyRecordValidator" : { }
    }
  } ],
  "schema" : {
    "name" : "charts",
    "namespace" : "com.linkedin.chart",
    "path" : "/charts",
    "schema" : "com.linkedin.dashboard.Chart",
    "doc" : "generated from: com.linkedin.metadata.resources.dashboard.Charts",
    "collection" : {
      "identifier" : {
        "name" : "key",
        "type" : "com.linkedin.dashboard.ChartKey",
        "params" : "com.linkedin.restli.common.EmptyRecord"
      },
      "supports" : [ "batch_get", "get", "get_all" ],
      "methods" : [ {
        "method" : "get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      }, {
        "method" : "batch_get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      }, {
        "method" : "get_all",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "pagingSupported" : true
      } ],
      "finders" : [ {
        "name" : "search",
        "parameters" : [ {
          "name" : "input",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "metadata" : {
          "type" : "com.linkedin.metadata.query.SearchResultMetadata"
        },
        "pagingSupported" : true
      } ],
      "actions" : [ {
        "name" : "autocomplete",
        "parameters" : [ {
          "name" : "query",
          "type" : "string"
        }, {
          "name" : "field",
          "type" : "string"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter"
        }, {
          "name" : "limit",
          "type" : "int"
        } ],
        "returns" : "com.linkedin.metadata.query.AutoCompleteResult"
      }, {
        "name" : "backfillWithUrns",
        "parameters" : [ {
          "name" : "urns",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.restli.BackfillResult"
      }, {
        "name" : "browse",
        "parameters" : [ {
          "name" : "path",
          "type" : "string"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "start",
          "type" : "int"
        }, {
          "name" : "limit",
          "type" : "int"
        } ],
        "returns" : "com.linkedin.metadata.query.BrowseResult"
      }, {
        "name" : "getBrowsePaths",
        "parameters" : [ {
          "name" : "urn",
          "type" : "com.linkedin.common.Urn"
        } ],
        "returns" : "{ \"type\" : \"array\", \"items\" : \"string\" }"
      }, {
        "name" : "getSnapshot",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.snapshot.ChartSnapshot"
      }, {
        "name" : "ingest",
        "parameters" : [ {
          "name" : "snapshot",
          "type" : "com.linkedin.metadata.snapshot.ChartSnapshot"
        } ]
      } ],
      "entity" : {
        "path" : "/charts/{key}"
      }
    }
  }
}
{
  "models" : [ {
    "type" : "record",
    "name" : "AuditStamp",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
    "fields" : [ {
      "name" : "time",
      "type" : {
        "type" : "typeref",
        "name" : "Time",
        "doc" : "Number of milliseconds since midnight, January 1, 1970 UTC. It must be a positive number",
        "ref" : "long"
      },
      "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
    }, {
      "name" : "actor",
      "type" : {
        "type" : "typeref",
        "name" : "Urn",
        "ref" : "string",
        "java" : {
          "class" : "com.linkedin.common.urn.Urn"
        }
      },
      "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."
    }, {
      "name" : "impersonator",
      "type" : "Urn",
      "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "BaseFieldMapping",
    "namespace" : "com.linkedin.common",
    "doc" : "Base model representing field mappings",
    "fields" : [ {
      "name" : "created",
      "type" : "AuditStamp",
      "doc" : "Audit stamp containing who reported the field mapping and when"
    }, {
      "name" : "transformation",
      "type" : [ {
        "type" : "enum",
        "name" : "TransformationType",
        "namespace" : "com.linkedin.common.fieldtransformer",
        "doc" : "Type of the transformation involved in generating destination fields from source fields.",
        "symbols" : [ "BLACKBOX", "IDENTITY" ],
        "symbolDocs" : {
          "BLACKBOX" : "Field transformation expressed as unknown black box function.",
          "IDENTITY" : "Field transformation expressed as Identity function."
        }
      }, {
        "type" : "record",
        "name" : "UDFTransformer",
        "namespace" : "com.linkedin.common.fieldtransformer",
        "doc" : "Field transformation expressed in UDF",
        "fields" : [ {
          "name" : "udf",
          "type" : "string",
          "doc" : "A UDF mentioning how the source fields got transformed to destination field. This is the FQCN(Fully Qualified Class Name) of the udf."
        } ]
      } ],
      "doc" : "Transfomration function between the fields involved"
    } ]
  }, {
    "type" : "record",
    "name" : "ChangeAuditStamps",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations",
    "fields" : [ {
      "name" : "created",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the creation of this resource/association/sub-resource"
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created"
    }, {
      "name" : "deleted",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "CustomProperties",
    "namespace" : "com.linkedin.common",
    "doc" : "Misc. properties about an entity.",
    "fields" : [ {
      "name" : "customProperties",
      "type" : {
        "type" : "map",
        "values" : "string"
      },
      "doc" : "Custom property bag.",
      "default" : { }
    } ]
  }, {
    "type" : "typeref",
    "name" : "DataPlatformUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized data platforms available",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DataPlatformUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized data platforms available",
        "entityType" : "dataPlatform",
        "fields" : [ {
          "doc" : "data platform name i.e. hdfs, oracle, espresso",
          "maxLength" : 25,
          "name" : "platformName",
          "type" : "string"
        } ],
        "maxLength" : 45,
        "name" : "DataPlatform",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:wherehows"
      }
    }
  }, {
    "type" : "typeref",
    "name" : "DatasetFieldUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized dataset field information identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DatasetFieldUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized dataset field information identifier",
        "entityType" : "datasetField",
        "fields" : [ {
          "doc" : "Dataset that this dataset field belongs to.",
          "name" : "dataset",
          "type" : "com.linkedin.common.urn.DatasetUrn"
        }, {
          "doc" : "Dataset field path",
          "maxLength" : 500,
          "name" : "fieldPath",
          "type" : "string"
        } ],
        "maxLength" : 807,
        "name" : "DatasetField",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "typeref",
    "name" : "DatasetUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized dataset identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DatasetUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized dataset identifier.",
        "entityType" : "dataset",
        "fields" : [ {
          "doc" : "Standardized platform urn where dataset is defined.",
          "name" : "platform",
          "type" : "com.linkedin.common.urn.DataPlatformUrn"
        }, {
          "doc" : "Dataset native name e.g. <db>.<table>, /dir/subdir/<name>, or <name>",
          "maxLength" : 210,
          "name" : "datasetName",
          "type" : "string"
        }, {
          "doc" : "data layer where dataset belongs to or where it was generated.",
          "name" : "layer",
          "type" : "string"
        } ],
        "maxLength" : 284,
        "name" : "Dataset",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "record",
    "name" : "ExternalReference",
    "namespace" : "com.linkedin.common",
    "doc" : "A reference to an external platform.",
    "fields" : [ {
      "name" : "externalUrl",
      "type" : {
        "type" : "typeref",
        "name" : "Url",
        "ref" : "string",
        "java" : {
          "class" : "com.linkedin.common.url.Url",
          "coercerClass" : "com.linkedin.common.url.UrlCoercer"
        }
      },
      "doc" : "URL where the reference exist",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "GlobalTags",
    "namespace" : "com.linkedin.common",
    "doc" : "Tag aspect used for applying tags to an entity",
    "fields" : [ {
      "name" : "tags",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "TagAssociation",
          "doc" : "Properties of an applied tag. For now, just an Urn. In the future we can extend this with other properties, e.g.\npropagation parameters.",
          "fields" : [ {
            "name" : "tag",
            "type" : {
              "type" : "typeref",
              "name" : "TagUrn",
              "doc" : "Globally defined tag",
              "ref" : "string",
              "java" : {
                "class" : "com.linkedin.common.urn.TagUrn"
              },
              "validate" : {
                "com.linkedin.common.validator.TypedUrnValidator" : {
                  "accessible" : true,
                  "constructable" : true,
                  "doc" : "Globally defined tags",
                  "entityType" : "tag",
                  "fields" : [ {
                    "doc" : "tag name",
                    "maxLength" : 200,
                    "name" : "name",
                    "type" : "string"
                  } ],
                  "maxLength" : 220,
                  "name" : "Tag",
                  "namespace" : "li",
                  "owners" : [ ],
                  "owningTeam" : "urn:li:internalTeam:datahub"
                }
              }
            },
            "doc" : "Urn of the applied tag"
          } ]
        }
      },
      "doc" : "Tags associated with a given entity"
    } ]
  }, {
    "type" : "record",
    "name" : "InstitutionalMemory",
    "namespace" : "com.linkedin.common",
    "doc" : "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity.",
    "fields" : [ {
      "name" : "elements",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "InstitutionalMemoryMetadata",
          "doc" : "Metadata corresponding to a record of institutional memory.",
          "fields" : [ {
            "name" : "url",
            "type" : "Url",
            "doc" : "Link to an engineering design document or a wiki page."
          }, {
            "name" : "description",
            "type" : "string",
            "doc" : "Description of the link."
          }, {
            "name" : "createStamp",
            "type" : "AuditStamp",
            "doc" : "Audit stamp associated with creation of this record"
          } ]
        }
      },
      "doc" : "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."
    } ]
  }, "com.linkedin.common.InstitutionalMemoryMetadata", {
    "type" : "record",
    "name" : "Owner",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information",
    "fields" : [ {
      "name" : "owner",
      "type" : "Urn",
      "doc" : "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\n(Caveat: only corpuser is currently supported in the frontend.)"
    }, {
      "name" : "type",
      "type" : {
        "type" : "enum",
        "name" : "OwnershipType",
        "doc" : "Owner category or owner role",
        "symbols" : [ "DEVELOPER", "DATAOWNER", "DELEGATE", "PRODUCER", "CONSUMER", "STAKEHOLDER" ],
        "symbolDocs" : {
          "CONSUMER" : "A person, group, or service that consumes the data",
          "DATAOWNER" : "A person or group that is owning the data",
          "DELEGATE" : "A person or a group that overseas the operation, e.g. a DBA or SRE.",
          "DEVELOPER" : "A person or group that is in charge of developing the code",
          "PRODUCER" : "A person, group, or service that produces/generates the data",
          "STAKEHOLDER" : "A person or a group that has direct business interest"
        }
      },
      "doc" : "The type of the ownership"
    }, {
      "name" : "source",
      "type" : {
        "type" : "record",
        "name" : "OwnershipSource",
        "doc" : "Source/provider of the ownership information",
        "fields" : [ {
          "name" : "type",
          "type" : {
            "type" : "enum",
            "name" : "OwnershipSourceType",
            "symbols" : [ "AUDIT", "DATABASE", "FILE_SYSTEM", "ISSUE_TRACKING_SYSTEM", "MANUAL", "SERVICE", "SOURCE_CONTROL", "OTHER" ],
            "symbolDocs" : {
              "AUDIT" : "Auditing system or audit logs",
              "DATABASE" : "Database, e.g. GRANTS table",
              "FILE_SYSTEM" : "File system, e.g. file/directory owner",
              "ISSUE_TRACKING_SYSTEM" : "Issue tracking system, e.g. Jira",
              "MANUAL" : "Manually provided by a user",
              "OTHER" : "Other sources",
              "SERVICE" : "Other ownership-like service, e.g. Nuage, ACL service etc",
              "SOURCE_CONTROL" : "SCM system, e.g. GIT, SVN"
            }
          },
          "doc" : "The type of the source"
        }, {
          "name" : "url",
          "type" : "string",
          "doc" : "A reference URL for the source",
          "optional" : true
        } ]
      },
      "doc" : "Source information for the ownership",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "Ownership",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information of an entity.",
    "fields" : [ {
      "name" : "owners",
      "type" : {
        "type" : "array",
        "items" : "Owner"
      },
      "doc" : "List of owners of the entity."
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "Audit stamp containing who last modified the record and when."
    } ]
  }, "com.linkedin.common.OwnershipSource", "com.linkedin.common.OwnershipSourceType", "com.linkedin.common.OwnershipType", {
    "type" : "record",
    "name" : "Status",
    "namespace" : "com.linkedin.common",
    "doc" : "The status metadata of an entity, e.g. dataset, metric, feature, etc.",
    "fields" : [ {
      "name" : "removed",
      "type" : "boolean",
      "doc" : "whether the entity is removed or not",
      "default" : false
    } ]
  }, "com.linkedin.common.TagAssociation", "com.linkedin.common.TagUrn", "com.linkedin.common.Time", {
    "type" : "typeref",
    "name" : "Uri",
    "namespace" : "com.linkedin.common",
    "ref" : "string",
    "java" : {
      "class" : "java.net.URI"
    }
  }, "com.linkedin.common.Url", "com.linkedin.common.Urn", {
    "type" : "record",
    "name" : "VersionTag",
    "namespace" : "com.linkedin.common",
    "doc" : "A resource-defined string representing the resource state for the purpose of concurrency control",
    "fields" : [ {
      "name" : "versionTag",
      "type" : "string",
      "optional" : true
    } ]
  }, "com.linkedin.common.fieldtransformer.TransformationType", "com.linkedin.common.fieldtransformer.UDFTransformer", {
    "type" : "record",
    "name" : "Dataset",
    "namespace" : "com.linkedin.dataset",
    "doc" : "Dataset spec for a data store. A collection of data conforming to a single schema that can evolve over time. This is equivalent to a Table in most data platforms. Espresso dataset: Identity.Profile; oracle dataset: member2.member_profile; hdfs dataset: /data/databases/JOBS/JOB_APPLICATIONS; kafka: PageViewEvent",
    "include" : [ {
      "type" : "record",
      "name" : "DatasetKey",
      "doc" : "Key for dataset resource",
      "fields" : [ {
        "name" : "platform",
        "type" : "com.linkedin.common.DataPlatformUrn",
        "doc" : "Standardized platform urn where dataset is defined. The data platform Urn (urn:li:platform:{platform_name})",
        "validate" : {
          "com.linkedin.dataset.rest.validator.DataPlatformValidator" : { }
        }
      }, {
        "name" : "name",
        "type" : "string",
        "doc" : "Dataset native name e.g. {db}.{table}, /dir/subdir/{name}, or {name}",
        "validate" : {
          "strlen" : {
            "max" : 500,
            "min" : 1
          }
        }
      }, {
        "name" : "layer",
        "type" : "string",
        "doc" : "Data layer where dataset belongs to or where it was generated.",
        "validate" : {
          "strlen" : {
            "max" : 500,
            "min" : 1
          }
        }
      } ]
    }, "com.linkedin.common.ChangeAuditStamps", "com.linkedin.common.VersionTag" ],
    "fields" : [ {
      "name" : "id",
      "type" : "long",
      "doc" : "Dataset unique identifier. System assigned value when a new dataset is created.",
      "default" : 0
    }, {
      "name" : "urn",
      "type" : "com.linkedin.common.DatasetUrn",
      "doc" : "Dataset urn"
    }, {
      "name" : "description",
      "type" : "string",
      "doc" : "Description for dataset",
      "default" : ""
    }, {
      "name" : "platformNativeType",
      "type" : {
        "type" : "enum",
        "name" : "PlatformNativeType",
        "symbols" : [ "TABLE", "VIEW", "DIRECTORY", "STREAM", "BUCKET" ],
        "symbolDocs" : {
          "BUCKET" : "Bucket in key value store",
          "DIRECTORY" : "Directory in file system",
          "STREAM" : "Stream",
          "TABLE" : "Table",
          "VIEW" : "View"
        }
      },
      "doc" : "The native format for the data platform",
      "optional" : true
    }, {
      "name" : "uri",
      "type" : "com.linkedin.common.Uri",
      "doc" : "The abstracted such as hdfs:///data/tracking/PageViewEvent, file:///dir/file_name. Uri should not include any environment specific properties. Some datasets might not have a standardized uri, which makes this field optional (i.e. kafka topic).",
      "optional" : true
    }, {
      "name" : "tags",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "tags for searching dataset",
      "default" : [ ]
    }, {
      "name" : "properties",
      "type" : {
        "type" : "map",
        "values" : "string"
      },
      "doc" : "A key-value map of platform-specific properties",
      "optional" : true
    }, {
      "name" : "removed",
      "type" : "boolean",
      "doc" : "whether the dataset is removed or not",
      "default" : false,
      "deprecated" : true
    }, {
      "name" : "deprecation",
      "type" : {
        "type" : "record",
        "name" : "DatasetDeprecation",
        "doc" : "Dataset deprecation status",
        "fields" : [ {
          "name" : "deprecated",
          "type" : "boolean",
          "doc" : "Whether the dataset is deprecated by owner."
        }, {
          "name" : "decommissionTime",
          "type" : "long",
          "doc" : "The time user plan to decommission this dataset.",
          "optional" : true
        }, {
          "name" : "note",
          "type" : "string",
          "doc" : "Additional information about the dataset deprecation plan, such as the wiki, doc, RB."
        }, {
          "name" : "actor",
          "type" : "com.linkedin.common.Urn",
          "doc" : "The corpuser URN which will be credited for modifying this deprecation content.",
          "optional" : true
        } ]
      },
      "doc" : "The dataset deprecation status",
      "optional" : true
    }, {
      "name" : "institutionalMemory",
      "type" : "com.linkedin.common.InstitutionalMemory",
      "doc" : "Institutional memory metadata of the dataset",
      "optional" : true
    }, {
      "name" : "ownership",
      "type" : "com.linkedin.common.Ownership",
      "doc" : "Ownership metadata of the dataset",
      "optional" : true
    }, {
      "name" : "schemaMetadata",
      "type" : {
        "type" : "record",
        "name" : "SchemaMetadata",
        "namespace" : "com.linkedin.schema",
        "doc" : "SchemaMetadata to describe metadata related to store schema",
        "include" : [ {
          "type" : "record",
          "name" : "SchemaMetadataKey",
          "doc" : "Key to retrieve schema metadata.",
          "fields" : [ {
            "name" : "schemaName",
            "type" : "string",
            "doc" : "Schema name e.g. PageViewEvent, identity.Profile, ams.account_management_tracking",
            "validate" : {
              "strlen" : {
                "max" : 500,
                "min" : 1
              }
            }
          }, {
            "name" : "platform",
            "type" : "com.linkedin.common.DataPlatformUrn",
            "doc" : "Standardized platform urn where schema is defined. The data platform Urn (urn:li:platform:{platform_name})"
          }, {
            "name" : "version",
            "type" : "long",
            "doc" : "Every change to SchemaMetadata in the resource results in a new version. Version is server assigned. This version is differ from platform native schema version."
          } ]
        }, "com.linkedin.common.ChangeAuditStamps" ],
        "fields" : [ {
          "name" : "dataset",
          "type" : "com.linkedin.common.DatasetUrn",
          "doc" : "Dataset this schema metadata is associated with.",
          "optional" : true
        }, {
          "name" : "cluster",
          "type" : "string",
          "doc" : "The cluster this schema metadata resides from",
          "optional" : true
        }, {
          "name" : "hash",
          "type" : "string",
          "doc" : "the SHA1 hash of the schema content"
        }, {
          "name" : "platformSchema",
          "type" : [ {
            "type" : "record",
            "name" : "EspressoSchema",
            "doc" : "Schema text of an espresso table schema.",
            "fields" : [ {
              "name" : "documentSchema",
              "type" : "string",
              "doc" : "The native espresso document schema."
            }, {
              "name" : "tableSchema",
              "type" : "string",
              "doc" : "The espresso table schema definition."
            } ]
          }, {
            "type" : "record",
            "name" : "OracleDDL",
            "doc" : "Schema holder for oracle data definition language that describes an oracle table.",
            "fields" : [ {
              "name" : "tableSchema",
              "type" : "string",
              "doc" : "The native schema in the dataset's platform. This is a human readable (json blob) table schema."
            } ]
          }, {
            "type" : "record",
            "name" : "MySqlDDL",
            "doc" : "Schema holder for MySql data definition language that describes an MySql table.",
            "fields" : [ {
              "name" : "tableSchema",
              "type" : "string",
              "doc" : "The native schema in the dataset's platform. This is a human readable (json blob) table schema."
            } ]
          }, {
            "type" : "record",
            "name" : "PrestoDDL",
            "doc" : "Schema holder for presto data definition language that describes a presto view.",
            "fields" : [ {
              "name" : "rawSchema",
              "type" : "string",
              "doc" : "The raw schema in the dataset's platform. This includes the DDL and the columns extracted from DDL."
            } ]
          }, {
            "type" : "record",
            "name" : "KafkaSchema",
            "doc" : "Schema holder for kafka schema.",
            "fields" : [ {
              "name" : "documentSchema",
              "type" : "string",
              "doc" : "The native kafka document schema. This is a human readable avro document schema."
            } ]
          }, {
            "type" : "record",
            "name" : "BinaryJsonSchema",
            "doc" : "Schema text of binary JSON schema.",
            "fields" : [ {
              "name" : "schema",
              "type" : "string",
              "doc" : "The native schema text for binary JSON file format."
            } ]
          }, {
            "type" : "record",
            "name" : "OrcSchema",
            "doc" : "Schema text of an ORC schema.",
            "fields" : [ {
              "name" : "schema",
              "type" : "string",
              "doc" : "The native schema for ORC file format."
            } ]
          }, {
            "type" : "record",
            "name" : "Schemaless",
            "doc" : "The dataset has no specific schema associated with it",
            "fields" : [ ]
          }, {
            "type" : "record",
            "name" : "KeyValueSchema",
            "doc" : "Schema text of a key-value store schema.",
            "fields" : [ {
              "name" : "keySchema",
              "type" : "string",
              "doc" : "The raw schema for the key in the key-value store."
            }, {
              "name" : "valueSchema",
              "type" : "string",
              "doc" : "The raw schema for the value in the key-value store."
            } ]
          }, {
            "type" : "record",
            "name" : "OtherSchema",
            "doc" : "Schema holder for undefined schema types.",
            "fields" : [ {
              "name" : "rawSchema",
              "type" : "string",
              "doc" : "The native schema in the dataset's platform."
            } ]
          } ],
          "doc" : "The native schema in the dataset's platform."
        }, {
          "name" : "fields",
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "record",
              "name" : "SchemaField",
              "doc" : "SchemaField to describe metadata related to dataset schema. Schema normalization rules: http://go/tms-schema",
              "fields" : [ {
                "name" : "fieldPath",
                "type" : {
                  "type" : "typeref",
                  "name" : "SchemaFieldPath",
                  "namespace" : "com.linkedin.dataset",
                  "doc" : "Schema field path as described by schema normalizations rules: http://go/tms-schema",
                  "ref" : "string"
                },
                "doc" : "Flattened name of the field. Field is computed from jsonPath field. For data translation rules refer to wiki page above."
              }, {
                "name" : "jsonPath",
                "type" : "string",
                "doc" : "Flattened name of a field in JSON Path notation.",
                "optional" : true
              }, {
                "name" : "nullable",
                "type" : "boolean",
                "doc" : "Indicates if this field is optional or nullable",
                "default" : false
              }, {
                "name" : "description",
                "type" : "string",
                "doc" : "Description",
                "optional" : true
              }, {
                "name" : "type",
                "type" : {
                  "type" : "record",
                  "name" : "SchemaFieldDataType",
                  "doc" : "Schema field data types",
                  "fields" : [ {
                    "name" : "type",
                    "type" : [ {
                      "type" : "record",
                      "name" : "BooleanType",
                      "doc" : "Boolean field type.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "FixedType",
                      "doc" : "Fixed field type.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "StringType",
                      "doc" : "String field type.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "BytesType",
                      "doc" : "Bytes field type.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "NumberType",
                      "doc" : "Number data type: long, integer, short, etc..",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "DateType",
                      "doc" : "Date field type.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "TimeType",
                      "doc" : "Time field type. This should also be used for datetimes.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "EnumType",
                      "doc" : "Enum field type.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "NullType",
                      "doc" : "Null field type.",
                      "fields" : [ ]
                    }, {
                      "type" : "record",
                      "name" : "MapType",
                      "doc" : "Map field type.",
                      "fields" : [ {
                        "name" : "keyType",
                        "type" : "string",
                        "doc" : "Key type in a map",
                        "optional" : true
                      }, {
                        "name" : "valueType",
                        "type" : "string",
                        "doc" : "Type of the value in a map",
                        "optional" : true
                      } ]
                    }, {
                      "type" : "record",
                      "name" : "ArrayType",
                      "doc" : "Array field type.",
                      "fields" : [ {
                        "name" : "nestedType",
                        "type" : {
                          "type" : "array",
                          "items" : "string"
                        },
                        "doc" : "List of types this array holds.",
                        "optional" : true
                      } ]
                    }, {
                      "type" : "record",
                      "name" : "UnionType",
                      "doc" : "Union field type.",
                      "fields" : [ {
                        "name" : "nestedTypes",
                        "type" : {
                          "type" : "array",
                          "items" : "string"
                        },
                        "doc" : "List of types in union type.",
                        "optional" : true
                      } ]
                    }, {
                      "type" : "record",
                      "name" : "RecordType",
                      "doc" : "Record field type.",
                      "fields" : [ ]
                    } ],
                    "doc" : "Data platform specific types"
                  } ]
                },
                "doc" : "Platform independent field type of the field."
              }, {
                "name" : "nativeDataType",
                "type" : "string",
                "doc" : "The native type of the field in the dataset's platform as declared by platform schema."
              }, {
                "name" : "recursive",
                "type" : "boolean",
                "doc" : "There are use cases when a field in type B references type A. A field in A references field of type B. In such cases, we will mark the first field as recursive.",
                "default" : false
              }, {
                "name" : "globalTags",
                "type" : "com.linkedin.common.GlobalTags",
                "doc" : "Tags associated with the field",
                "optional" : true
              } ]
            }
          },
          "doc" : "Client provided a list of fields from document schema."
        }, {
          "name" : "primaryKeys",
          "type" : {
            "type" : "array",
            "items" : "com.linkedin.dataset.SchemaFieldPath"
          },
          "doc" : "Client provided list of fields that define primary keys to access record. Field order defines hierarchical espresso keys. Empty lists indicates absence of primary key access patter. Value is a SchemaField@fieldPath.",
          "optional" : true
        }, {
          "name" : "foreignKeysSpecs",
          "type" : {
            "type" : "map",
            "values" : {
              "type" : "record",
              "name" : "ForeignKeySpec",
              "doc" : "Description of a foreign key in a schema.",
              "fields" : [ {
                "name" : "foreignKey",
                "type" : [ {
                  "type" : "record",
                  "name" : "DatasetFieldForeignKey",
                  "doc" : "For non-urn based foregin keys.",
                  "fields" : [ {
                    "name" : "parentDataset",
                    "type" : "com.linkedin.common.DatasetUrn",
                    "doc" : "dataset that stores the resource."
                  }, {
                    "name" : "currentFieldPaths",
                    "type" : {
                      "type" : "array",
                      "items" : "com.linkedin.dataset.SchemaFieldPath"
                    },
                    "doc" : "List of fields in hosting(current) SchemaMetadata that conform a foreign key. List can contain a single entry or multiple entries if several entries in hosting schema conform a foreign key in a single parent dataset."
                  }, {
                    "name" : "parentField",
                    "type" : "com.linkedin.dataset.SchemaFieldPath",
                    "doc" : "SchemaField@fieldPath that uniquely identify field in parent dataset that this field references."
                  } ]
                }, {
                  "type" : "record",
                  "name" : "UrnForeignKey",
                  "doc" : "If SchemaMetadata fields make any external references and references are of type com.linkedin.common.Urn or any children, this models can be used to mark it.",
                  "fields" : [ {
                    "name" : "currentFieldPath",
                    "type" : "com.linkedin.dataset.SchemaFieldPath",
                    "doc" : "Field in hosting(current) SchemaMetadata."
                  } ]
                } ],
                "doc" : "Foreign key definition in metadata schema."
              } ]
            }
          },
          "doc" : "Map captures all the references schema makes to external datasets. Map key is ForeignKeySpecName typeref.",
          "optional" : true
        } ]
      },
      "doc" : "Schema metadata of the dataset",
      "optional" : true
    }, {
      "name" : "editableSchemaMetadata",
      "type" : {
        "type" : "record",
        "name" : "EditableSchemaMetadata",
        "namespace" : "com.linkedin.schema",
        "doc" : "EditableSchemaMetadata stores editable changes made to schema metadata. This separates changes made from\ningestion pipelines and edits in the UI to avoid accidental overwrites of user-provided data by ingestion pipelines.",
        "include" : [ "com.linkedin.common.ChangeAuditStamps" ],
        "fields" : [ {
          "name" : "editableSchemaFieldInfo",
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "record",
              "name" : "EditableSchemaFieldInfo",
              "doc" : "SchemaField to describe metadata related to dataset schema.",
              "fields" : [ {
                "name" : "fieldPath",
                "type" : "string",
                "doc" : "FieldPath uniquely identifying the SchemaField this metadata is associated with"
              }, {
                "name" : "description",
                "type" : "string",
                "doc" : "Description",
                "optional" : true
              }, {
                "name" : "globalTags",
                "type" : "com.linkedin.common.GlobalTags",
                "doc" : "Tags associated with the field",
                "optional" : true
              } ]
            }
          },
          "doc" : "Client provided a list of fields from document schema."
        } ]
      },
      "doc" : "Editable schema metadata of the dataset",
      "optional" : true
    }, {
      "name" : "status",
      "type" : "com.linkedin.common.Status",
      "doc" : "Status metadata of the dataset",
      "optional" : true
    }, {
      "name" : "upstreamLineage",
      "type" : {
        "type" : "record",
        "name" : "UpstreamLineage",
        "doc" : "Upstream lineage of a dataset",
        "fields" : [ {
          "name" : "upstreams",
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "record",
              "name" : "Upstream",
              "doc" : "Upstream lineage information about a dataset including the source reporting the lineage",
              "fields" : [ {
                "name" : "auditStamp",
                "type" : "com.linkedin.common.AuditStamp",
                "doc" : "Audit stamp containing who reported the lineage and when"
              }, {
                "name" : "dataset",
                "type" : "com.linkedin.common.DatasetUrn",
                "doc" : "The upstream dataset the lineage points to"
              }, {
                "name" : "type",
                "type" : {
                  "type" : "enum",
                  "name" : "DatasetLineageType",
                  "doc" : "The various types of supported dataset lineage",
                  "symbols" : [ "COPY", "TRANSFORMED", "VIEW" ],
                  "symbolDocs" : {
                    "COPY" : "Direct copy without modification",
                    "TRANSFORMED" : "Transformed data with modification (format or content change)",
                    "VIEW" : "Represents a view defined on the sources e.g. Hive view defined on underlying hive tables or a Hive table pointing to a HDFS dataset or DALI view defined on multiple sources"
                  }
                },
                "doc" : "The type of the lineage"
              } ]
            }
          },
          "doc" : "List of upstream dataset lineage information"
        } ]
      },
      "doc" : "Upstream lineage metadata of the dataset",
      "optional" : true
    }, {
      "name" : "globalTags",
      "type" : "com.linkedin.common.GlobalTags",
      "doc" : "List of global tags applied to the dataset",
      "optional" : true
    }, {
      "name" : "externalUrl",
      "type" : "com.linkedin.common.Url",
      "doc" : "External URL associated with the dataset",
      "optional" : true
    } ]
  }, "com.linkedin.dataset.DatasetDeprecation", {
    "type" : "record",
    "name" : "DatasetFieldMapping",
    "namespace" : "com.linkedin.dataset",
    "doc" : "Representation of mapping between fields in source dataset to the field in destination dataset",
    "include" : [ "com.linkedin.common.BaseFieldMapping" ],
    "fields" : [ {
      "name" : "sourceFields",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "typeref",
          "name" : "DatasetFieldUpstream",
          "doc" : "Upstreams of a dataset field.",
          "ref" : [ "com.linkedin.common.DatasetFieldUrn" ]
        }
      },
      "doc" : "Source fields from which the fine grained lineage is derived"
    }, {
      "name" : "destinationField",
      "type" : "com.linkedin.common.DatasetFieldUrn",
      "doc" : "Destination field which is derived from source fields"
    } ]
  }, "com.linkedin.dataset.DatasetFieldUpstream", "com.linkedin.dataset.DatasetKey", "com.linkedin.dataset.DatasetLineageType", {
    "type" : "record",
    "name" : "DatasetProperties",
    "namespace" : "com.linkedin.dataset",
    "doc" : "Properties associated with a Dataset",
    "include" : [ "com.linkedin.common.CustomProperties", "com.linkedin.common.ExternalReference" ],
    "fields" : [ {
      "name" : "description",
      "type" : "string",
      "doc" : "Documentation of the dataset",
      "optional" : true
    }, {
      "name" : "uri",
      "type" : "com.linkedin.common.Uri",
      "doc" : "The abstracted URI such as hdfs:///data/tracking/PageViewEvent, file:///dir/file_name. Uri should not include any environment specific properties. Some datasets might not have a standardized uri, which makes this field optional (i.e. kafka topic).",
      "optional" : true
    }, {
      "name" : "tags",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "[Legacy] Unstructured tags for the dataset. Structured tags can be applied via the `GlobalTags` aspect.",
      "default" : [ ]
    } ]
  }, {
    "type" : "record",
    "name" : "DatasetUpstreamLineage",
    "namespace" : "com.linkedin.dataset",
    "doc" : "Fine Grained upstream lineage for fields in a dataset",
    "fields" : [ {
      "name" : "fieldMappings",
      "type" : {
        "type" : "array",
        "items" : "DatasetFieldMapping"
      },
      "doc" : "Upstream to downstream field level lineage mappings"
    } ]
  }, {
    "type" : "record",
    "name" : "Downstream",
    "namespace" : "com.linkedin.dataset",
    "doc" : "Downstream lineage information about a dataset including the source reporting the lineage",
    "fields" : [ {
      "name" : "auditStamp",
      "type" : "com.linkedin.common.AuditStamp",
      "doc" : "Audit stamp containing who reported the lineage and when"
    }, {
      "name" : "dataset",
      "type" : "com.linkedin.common.DatasetUrn",
      "doc" : "The downstream dataset the lineage points to"
    }, {
      "name" : "type",
      "type" : "DatasetLineageType",
      "doc" : "The type of the lineage"
    } ]
  }, {
    "type" : "record",
    "name" : "DownstreamLineage",
    "namespace" : "com.linkedin.dataset",
    "doc" : "Downstream lineage of a dataset",
    "fields" : [ {
      "name" : "downstreams",
      "type" : {
        "type" : "array",
        "items" : "Downstream"
      },
      "doc" : "List of downstream dataset lineage information"
    } ]
  }, "com.linkedin.dataset.PlatformNativeType", "com.linkedin.dataset.SchemaFieldPath", "com.linkedin.dataset.Upstream", "com.linkedin.dataset.UpstreamLineage", {
    "type" : "record",
    "name" : "UpstreamLineageDelta",
    "namespace" : "com.linkedin.dataset",
    "doc" : "Describes a delta change to a dataset upstream lineage",
    "fields" : [ {
      "name" : "upstreamsToUpdate",
      "type" : {
        "type" : "array",
        "items" : "Upstream"
      },
      "doc" : "The list of upstream lineages to be updated for a dataset"
    } ]
  }, {
    "type" : "typeref",
    "name" : "DatasetAspect",
    "namespace" : "com.linkedin.metadata.aspect",
    "doc" : "A union of all supported metadata aspects for a Dataset",
    "ref" : [ "com.linkedin.dataset.DatasetProperties", "com.linkedin.dataset.DatasetDeprecation", "com.linkedin.dataset.DatasetUpstreamLineage", "com.linkedin.dataset.UpstreamLineage", "com.linkedin.common.InstitutionalMemory", "com.linkedin.common.Ownership", "com.linkedin.common.Status", "com.linkedin.schema.SchemaMetadata", "com.linkedin.schema.EditableSchemaMetadata", "com.linkedin.common.GlobalTags" ]
  }, {
    "type" : "record",
    "name" : "AggregationMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "name",
      "type" : "string",
      "doc" : "The name of the aggregation, e.g, platform, origin"
    }, {
      "name" : "aggregations",
      "type" : {
        "type" : "map",
        "values" : "long"
      },
      "doc" : "List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc"
    } ]
  }, {
    "type" : "record",
    "name" : "AutoCompleteResult",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the auto complete result",
    "fields" : [ {
      "name" : "query",
      "type" : "string",
      "doc" : "The original chars typed by user"
    }, {
      "name" : "suggestions",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "A list of typeahead suggestions"
    } ]
  }, {
    "type" : "record",
    "name" : "BrowseResult",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the result of a browse query",
    "fields" : [ {
      "name" : "entities",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "BrowseResultEntity",
          "doc" : "Data model for an entity returned as part of a browse query",
          "fields" : [ {
            "name" : "name",
            "type" : "string",
            "doc" : "Name of the entity",
            "optional" : true
          }, {
            "name" : "urn",
            "type" : "com.linkedin.common.Urn",
            "doc" : "URN of the entity"
          } ]
        }
      },
      "doc" : "A list of entities under the queried path"
    }, {
      "name" : "metadata",
      "type" : {
        "type" : "record",
        "name" : "BrowseResultMetadata",
        "doc" : "The model for browse result metadata",
        "fields" : [ {
          "name" : "path",
          "type" : "string",
          "doc" : "Path that is being browsed"
        }, {
          "name" : "groups",
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "record",
              "name" : "BrowseResultGroup",
              "fields" : [ {
                "name" : "name",
                "type" : "string",
                "doc" : "Name of the group"
              }, {
                "name" : "count",
                "type" : "long",
                "doc" : "Number of entities that can be reached from this path"
              } ]
            }
          },
          "doc" : "A list of groups and total number of entities inside those groups under the queried path",
          "default" : [ ]
        }, {
          "name" : "totalNumEntities",
          "type" : "long",
          "doc" : "Total number of entities we can reach from path"
        } ]
      },
      "doc" : "Metadata specific to the browse result of the queried path"
    }, {
      "name" : "from",
      "type" : "int",
      "doc" : "Offset of the first entity in the result"
    }, {
      "name" : "pageSize",
      "type" : "int",
      "doc" : "Size of each page in the result"
    }, {
      "name" : "numEntities",
      "type" : "int",
      "doc" : "The total number of entities directly under queried path"
    } ]
  }, "com.linkedin.metadata.query.BrowseResultEntity", "com.linkedin.metadata.query.BrowseResultGroup", "com.linkedin.metadata.query.BrowseResultMetadata", {
    "type" : "enum",
    "name" : "Condition",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The matching condition in a filter criterion",
    "symbols" : [ "CONTAIN", "END_WITH", "EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "START_WITH" ],
    "symbolDocs" : {
      "CONTAIN" : "Represent the relation: String field contains value, e.g. name contains Profile",
      "END_WITH" : "Represent the relation: String field ends with value, e.g. name ends with Event",
      "EQUAL" : "Represent the relation: field = value, e.g. platform = hdfs",
      "GREATER_THAN" : "Represent the relation greater than, e.g. ownerCount > 5",
      "GREATER_THAN_OR_EQUAL_TO" : "Represent the relation greater than or equal to, e.g. ownerCount >= 5",
      "LESS_THAN" : "Represent the relation less than, e.g. ownerCount < 3",
      "LESS_THAN_OR_EQUAL_TO" : "Represent the relation less than or equal to, e.g. ownerCount <= 3",
      "START_WITH" : "Represent the relation: String field starts with value, e.g. name starts with PageView"
    }
  }, {
    "type" : "record",
    "name" : "Criterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "A criterion for matching a field with given value",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that the criterion refers to"
    }, {
      "name" : "value",
      "type" : "string",
      "doc" : "The value of the intended field"
    }, {
      "name" : "condition",
      "type" : "Condition",
      "doc" : "The condition for the criterion, e.g. EQUAL, START_WITH",
      "default" : "EQUAL"
    } ]
  }, {
    "type" : "record",
    "name" : "Filter",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The filter for finding an record or a collection of records",
    "fields" : [ {
      "name" : "criteria",
      "type" : {
        "type" : "array",
        "items" : "Criterion"
      },
      "doc" : "A list of criteria the filter applies to the query"
    } ]
  }, {
    "type" : "record",
    "name" : "IndexCriterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "A criterion for matching a field with given value",
    "fields" : [ {
      "name" : "aspect",
      "type" : "string",
      "doc" : "FQCN of the aspect class in the index table that this criterion refers to e.g. com.linkedin.common.Status"
    }, {
      "name" : "pathParams",
      "type" : {
        "type" : "record",
        "name" : "IndexPathParams",
        "doc" : "Model combining index path, value and the condition for the criterion to be satisfied",
        "fields" : [ {
          "name" : "path",
          "type" : "string",
          "doc" : "Corresponding path column of the index table that this criterion refers to e.g. /removed (corresponding to field \"removed\" of com.linkedin.common.Status aspect)"
        }, {
          "name" : "value",
          "type" : {
            "type" : "typeref",
            "name" : "IndexValue",
            "doc" : "A union of all supported value types in the index table",
            "ref" : [ "boolean", "double", "float", "int", "long", "string" ]
          },
          "doc" : "Value of the corresponding path of the aspect"
        }, {
          "name" : "condition",
          "type" : "Condition",
          "doc" : "Condition for the criterion to be satisfied e.g. EQUAL, START_WITH",
          "default" : "EQUAL"
        } ]
      },
      "doc" : "Corresponding path, value and condition that this criterion refers to",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "IndexFilter",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "Filters for finding records in the index table",
    "fields" : [ {
      "name" : "criteria",
      "type" : {
        "type" : "array",
        "items" : "IndexCriterion"
      },
      "doc" : "A list of criteria to filter records from the index table, AND being the logical operator"
    } ]
  }, "com.linkedin.metadata.query.IndexPathParams", "com.linkedin.metadata.query.IndexValue", {
    "type" : "record",
    "name" : "MatchMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "matchedFields",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "MatchedField",
          "fields" : [ {
            "name" : "name",
            "type" : "string",
            "doc" : "Matched field name"
          }, {
            "name" : "value",
            "type" : "string",
            "doc" : "Matched field value"
          } ]
        }
      },
      "doc" : "Matched field name and values"
    } ]
  }, "com.linkedin.metadata.query.MatchedField", {
    "type" : "record",
    "name" : "SearchResultMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the search result",
    "fields" : [ {
      "name" : "searchResultMetadatas",
      "type" : {
        "type" : "array",
        "items" : "AggregationMetadata"
      },
      "doc" : "A list of search result metadata such as aggregations"
    }, {
      "name" : "urns",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.Urn"
      },
      "doc" : "A list of urns corresponding to search documents (in order) as returned by the search index"
    }, {
      "name" : "matches",
      "type" : {
        "type" : "array",
        "items" : "MatchMetadata"
      },
      "doc" : "A list of match metadata for each search result, containing the list of fields in the search document that matched the query",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "SortCriterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "Sort order along with the field to sort it on, to be applied to the results.",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that sorting has to be applied to"
    }, {
      "name" : "order",
      "type" : {
        "type" : "enum",
        "name" : "SortOrder",
        "doc" : "The order used to sort the results",
        "symbols" : [ "ASCENDING", "DESCENDING" ],
        "symbolDocs" : {
          "ASCENDING" : "If results need to be sorted in ascending order",
          "DESCENDING" : "If results need to be sorted in descending order"
        }
      },
      "doc" : "The order to sort the results i.e. ASCENDING or DESCENDING"
    } ]
  }, "com.linkedin.metadata.query.SortOrder", {
    "type" : "record",
    "name" : "BackfillResult",
    "namespace" : "com.linkedin.metadata.restli",
    "doc" : "The model for the result of a backfill",
    "fields" : [ {
      "name" : "entities",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "BackfillResultEntity",
          "fields" : [ {
            "name" : "urn",
            "type" : "com.linkedin.common.Urn",
            "doc" : "Urn of the backfilled entity"
          }, {
            "name" : "aspects",
            "type" : {
              "type" : "array",
              "items" : "string"
            },
            "doc" : "List of the aspects backfilled for the entity"
          } ]
        }
      },
      "doc" : "List of backfilled entities"
    } ]
  }, "com.linkedin.metadata.restli.BackfillResultEntity", {
    "type" : "record",
    "name" : "DatasetSnapshot",
    "namespace" : "com.linkedin.metadata.snapshot",
    "doc" : "A metadata snapshot for a specific dataset entity.",
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.DatasetUrn",
      "doc" : "URN for the entity the metadata snapshot is associated with."
    }, {
      "name" : "aspects",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.metadata.aspect.DatasetAspect"
      },
      "doc" : "The list of metadata aspects associated with the dataset. Depending on the use case, this can either be all, or a selection, of supported aspects."
    } ]
  }, {
    "type" : "record",
    "name" : "EmptyRecord",
    "namespace" : "com.linkedin.restli.common",
    "doc" : "An literally empty record.  Intended as a marker to indicate the absence of content where a record type is required.  If used the underlying DataMap *must* be empty, EmptyRecordValidator is provided to help enforce this.  For example,  CreateRequest extends Request<EmptyRecord> to indicate it has no response body.   Also, a ComplexKeyResource implementation that has no ParamKey should have a signature like XyzResource implements ComplexKeyResource<XyzKey, EmptyRecord, Xyz>.",
    "fields" : [ ],
    "validate" : {
      "com.linkedin.restli.common.EmptyRecordValidator" : { }
    }
  }, "com.linkedin.schema.ArrayType", "com.linkedin.schema.BinaryJsonSchema", "com.linkedin.schema.BooleanType", "com.linkedin.schema.BytesType", "com.linkedin.schema.DatasetFieldForeignKey", "com.linkedin.schema.DateType", "com.linkedin.schema.EditableSchemaFieldInfo", "com.linkedin.schema.EditableSchemaMetadata", "com.linkedin.schema.EnumType", "com.linkedin.schema.EspressoSchema", "com.linkedin.schema.FixedType", "com.linkedin.schema.ForeignKeySpec", "com.linkedin.schema.KafkaSchema", "com.linkedin.schema.KeyValueSchema", "com.linkedin.schema.MapType", "com.linkedin.schema.MySqlDDL", "com.linkedin.schema.NullType", "com.linkedin.schema.NumberType", "com.linkedin.schema.OracleDDL", "com.linkedin.schema.OrcSchema", "com.linkedin.schema.OtherSchema", "com.linkedin.schema.PrestoDDL", "com.linkedin.schema.RecordType", "com.linkedin.schema.SchemaField", "com.linkedin.schema.SchemaFieldDataType", "com.linkedin.schema.SchemaMetadata", "com.linkedin.schema.SchemaMetadataKey", "com.linkedin.schema.Schemaless", "com.linkedin.schema.StringType", "com.linkedin.schema.TimeType", "com.linkedin.schema.UnionType", "com.linkedin.schema.UrnForeignKey" ],
  "schema" : {
    "name" : "datasets",
    "namespace" : "com.linkedin.dataset",
    "path" : "/datasets",
    "schema" : "com.linkedin.dataset.Dataset",
    "doc" : "generated from: com.linkedin.metadata.resources.dataset.Datasets",
    "collection" : {
      "identifier" : {
        "name" : "dataset",
        "type" : "com.linkedin.dataset.DatasetKey",
        "params" : "com.linkedin.restli.common.EmptyRecord"
      },
      "supports" : [ "batch_get", "get" ],
      "methods" : [ {
        "method" : "get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      }, {
        "method" : "batch_get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      } ],
      "finders" : [ {
        "name" : "filter",
        "doc" : "Retrieves the values for multiple entities obtained after filtering urns from local secondary index. Here the value is\n made up of latest versions of specified aspects. If no aspects are provided, value model will not contain any metadata aspect.\n\n <p>If no filter conditions are provided, then it returns values of given entity type.",
        "parameters" : [ {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.IndexFilter",
          "optional" : true,
          "doc" : "{@link IndexFilter} that defines the filter conditions"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true,
          "doc" : "list of aspects to be returned in the VALUE model"
        }, {
          "name" : "urn",
          "type" : "string",
          "optional" : true,
          "doc" : "last urn of the previous fetched page. For the first page, this should be set as NULL"
        } ],
        "pagingSupported" : true
      }, {
        "name" : "search",
        "parameters" : [ {
          "name" : "input",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "metadata" : {
          "type" : "com.linkedin.metadata.query.SearchResultMetadata"
        },
        "pagingSupported" : true
      } ],
      "actions" : [ {
        "name" : "autocomplete",
        "parameters" : [ {
          "name" : "query",
          "type" : "string"
        }, {
          "name" : "field",
          "type" : "string"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter"
        }, {
          "name" : "limit",
          "type" : "int"
        } ],
        "returns" : "com.linkedin.metadata.query.AutoCompleteResult"
      }, {
        "name" : "backfill",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.restli.BackfillResult"
      }, {
        "name" : "browse",
        "parameters" : [ {
          "name" : "path",
          "type" : "string"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "start",
          "type" : "int"
        }, {
          "name" : "limit",
          "type" : "int"
        } ],
        "returns" : "com.linkedin.metadata.query.BrowseResult"
      }, {
        "name" : "getBrowsePaths",
        "parameters" : [ {
          "name" : "urn",
          "type" : "com.linkedin.common.Urn"
        } ],
        "returns" : "{ \"type\" : \"array\", \"items\" : \"string\" }"
      }, {
        "name" : "getSnapshot",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.snapshot.DatasetSnapshot"
      }, {
        "name" : "ingest",
        "parameters" : [ {
          "name" : "snapshot",
          "type" : "com.linkedin.metadata.snapshot.DatasetSnapshot"
        } ]
      } ],
      "entity" : {
        "path" : "/datasets/{dataset}",
        "subresources" : [ {
          "name" : "deprecation",
          "namespace" : "com.linkedin.dataset",
          "path" : "/datasets/{dataset}/deprecation",
          "schema" : "com.linkedin.dataset.DatasetDeprecation",
          "doc" : "Rest.li entry point: /datasets/{datasetKey}/deprecation\n\ngenerated from: com.linkedin.metadata.resources.dataset.DeprecationResource",
          "collection" : {
            "identifier" : {
              "name" : "deprecationId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/datasets/{dataset}/deprecation/{deprecationId}"
            }
          }
        }, {
          "name" : "downstreamLineage",
          "namespace" : "com.linkedin.dataset",
          "path" : "/datasets/{dataset}/downstreamLineage",
          "schema" : "com.linkedin.dataset.DownstreamLineage",
          "doc" : "Rest.li entry point: /datasets/{datasetKey}/downstreamLineage\n\ngenerated from: com.linkedin.metadata.resources.dataset.DownstreamLineageResource",
          "simple" : {
            "supports" : [ "get" ],
            "methods" : [ {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/datasets/{dataset}/downstreamLineage"
            }
          }
        }, {
          "name" : "institutionalMemory",
          "namespace" : "com.linkedin.dataset",
          "path" : "/datasets/{dataset}/institutionalMemory",
          "schema" : "com.linkedin.common.InstitutionalMemory",
          "doc" : "Rest.li entry point: /datasets/{datasetKey}/institutionalMemory\n\ngenerated from: com.linkedin.metadata.resources.dataset.InstitutionalMemoryResource",
          "collection" : {
            "identifier" : {
              "name" : "institutionalMemoryId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/datasets/{dataset}/institutionalMemory/{institutionalMemoryId}"
            }
          }
        }, {
          "name" : "rawOwnership",
          "namespace" : "com.linkedin.dataset",
          "path" : "/datasets/{dataset}/rawOwnership",
          "schema" : "com.linkedin.common.Ownership",
          "doc" : "Rest.li entry point: /datasets/{datasetKey}/rawOwnership\n\ngenerated from: com.linkedin.metadata.resources.dataset.OwnershipResource",
          "collection" : {
            "identifier" : {
              "name" : "rawOwnershipId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/datasets/{dataset}/rawOwnership/{rawOwnershipId}"
            }
          }
        }, {
          "name" : "schema",
          "namespace" : "com.linkedin.dataset",
          "path" : "/datasets/{dataset}/schema",
          "schema" : "com.linkedin.schema.SchemaMetadata",
          "doc" : "Rest.li entry point: /datasets/{datasetKey}/schema\n\ngenerated from: com.linkedin.metadata.resources.dataset.SchemaResource",
          "collection" : {
            "identifier" : {
              "name" : "schemaId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/datasets/{dataset}/schema/{schemaId}"
            }
          }
        }, {
          "name" : "upstreamLineage",
          "namespace" : "com.linkedin.dataset",
          "path" : "/datasets/{dataset}/upstreamLineage",
          "schema" : "com.linkedin.dataset.UpstreamLineage",
          "doc" : "Rest.li entry point: /datasets/{datasetKey}/upstreamLineage\n\ngenerated from: com.linkedin.metadata.resources.dataset.UpstreamLineageResource",
          "collection" : {
            "identifier" : {
              "name" : "upstreamLineageId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "actions" : [ {
              "name" : "deltaUpdate",
              "parameters" : [ {
                "name" : "delta",
                "type" : "com.linkedin.dataset.UpstreamLineageDelta"
              } ],
              "returns" : "com.linkedin.dataset.UpstreamLineage"
            } ],
            "entity" : {
              "path" : "/datasets/{dataset}/upstreamLineage/{upstreamLineageId}"
            }
          }
        } ]
      }
    }
  }
}